{
  "implemented_requirements": [
    {
      "uuid": "c623d3d5-ee5a-40c8-ada0-aaf7463a421f",
      "control-id": "sc-3",
      "props": [
        {
          "name": "control-status",
          "value": "applicable and inherently satisfied",
          "ns": "urn:maposcal:control-status-reference"
        },
        {
          "name": "control-name",
          "value": "Security Function Isolation",
          "ns": "urn:maposcal:control-name-reference"
        },
        {
          "name": "control-description",
          "value": "Isolate security functions from nonsecurity functions.",
          "ns": "urn:maposcal:control-description-reference"
        },
        {
          "name": "control-explanation",
          "value": "MinIO implements security function isolation inherently through its modular architecture. Security-critical components such as IAM, STS, encryption subsystems, and audit logging are implemented as distinct modules with clear separation from nonsecurity functions like storage engine and metrics. The use of separate logical components for authentication, authorization, key management, and audit logging ensures that security functions operate independently and are isolated from other system functions. Additionally, cryptographic operations and key handling are confined to dedicated libraries and packages. This design prevents unauthorized interaction between security and nonsecurity functions and supports strong isolation without requiring additional configuration.",
          "ns": "urn:maposcal:explanation-reference"
        },
        {
          "name": "control-configuration",
          "value": [],
          "ns": "urn:maposcal:configuration-reference"
        }
      ],
      "annotations": [
        {
          "name": "source-code-reference",
          "value": [
            "cmd/sts-datatypes.go",
            "internal/crypto/header.go"
          ],
          "ns": "urn:maposcal:source-code-reference"
        }
      ],
      "statements": [
        {
          "statement-id": "sc-3_smt.a",
          "uuid": "9ee59f68-f747-44c6-be36-bedab2742419",
          "description": "Security functions such as IAM, STS, encryption, and audit logging are implemented in separate modules with no shared code or direct dependencies on nonsecurity components, ensuring logical and functional isolation."
        }
      ],
      "control_id": "sc-3"
    },
    {
      "uuid": "6fce8542-93dc-4469-b84a-7d1a49826db3",
      "control-id": "sc-12",
      "props": [
        {
          "name": "control-status",
          "value": "applicable and inherently satisfied",
          "ns": "urn:maposcal:control-status-reference"
        },
        {
          "name": "control-name",
          "value": "Cryptographic Key Establishment and Management",
          "ns": "urn:maposcal:control-name-reference"
        },
        {
          "name": "control-description",
          "value": "Establish and manage cryptographic keys when cryptography is employed within the system in accordance with the following key management requirements: In accordance with Federal requirements.\n\nAdditional requirements:\n- requirements for key generation, distribution, storage, access, and destruction are defined;",
          "ns": "urn:maposcal:control-description-reference"
        },
        {
          "name": "control-explanation",
          "value": "MinIO implements cryptographic key establishment and management inherently within its encryption subsystem. Object keys (OEKs) are generated uniquely per object using cryptographically secure random generation. These keys are never stored in plaintext and are sealed with Key Encryption Keys (KEKs) obtained from either client-provided keys (SSE-C), internally managed master keys (SSE-S3), or external KMS integrations. Key distribution occurs securely via client requests or KMS protocols. Access to keys is controlled via IAM policies and temporary STS credentials, ensuring only authorized entities can use keys. Key destruction is implicit through ephemeral object keys and secure overwriting upon object deletion or rotation. The system supports federal-level cryptographic practices by integrating with external KMS providers and applying AEAD and CSPRNG standards, satisfying all federal key management requirements inherently without requiring additional configuration.",
          "ns": "urn:maposcal:explanation-reference"
        },
        {
          "name": "control-configuration",
          "value": [],
          "ns": "urn:maposcal:configuration-reference"
        }
      ],
      "annotations": [
        {
          "name": "source-code-reference",
          "value": [
            "internal/crypto/crypto.go",
            "cmd/config/config.go",
            "internal/kms/kms.go",
            "internal/auth/auth.go"
          ],
          "ns": "urn:maposcal:source-code-reference"
        }
      ],
      "statements": [
        {
          "statement-id": "sc-12_smt.a",
          "uuid": "635c3037-9997-4e4b-a9d2-405c5723bbdc",
          "description": "Object keys are generated with cryptographically secure random functions and are sealed with KEKs from either client-provided keys, internal master keys, or external KMS. Access control is enforced through IAM and STS temporary credentials, ensuring key usage is authorized. The system integrates with federal-compliant KMS backends, supporting secure key lifecycle management including generation, distribution, storage, access, and destruction."
        }
      ],
      "control_id": "sc-12"
    },
    {
      "uuid": "3f4821a5-f809-4e18-a128-6eaf693cd43a",
      "control-id": "sc-13",
      "props": [
        {
          "name": "control-status",
          "value": "applicable and inherently satisfied",
          "ns": "urn:maposcal:control-status-reference"
        },
        {
          "name": "control-name",
          "value": "Cryptographic Protection",
          "ns": "urn:maposcal:control-name-reference"
        },
        {
          "name": "control-description",
          "value": "Determine the cryptographic uses are defined; ; and\n\nAdditional requirements:\n- cryptographic uses are defined;\n- types of cryptography for each specified cryptographic use are defined;",
          "ns": "urn:maposcal:control-description-reference"
        },
        {
          "name": "control-explanation",
          "value": "MinIO defines cryptographic uses comprehensively, including encryption of data at rest and in transit, authentication, and key management. Types of cryptography are explicitly specified: data at rest is protected via server-side encryption methods SSE-C (using client-provided keys), SSE-S3 (using keys from internal or external KMS), employing AEAD and key wrapping with KEKs; data in transit is protected with TLS/SSL supporting mutual TLS with client certificates. Authentication uses cryptographic methods such as HMAC for AWS Signature Version 4 and JWT signing for STS tokens. Key management integrates with external KMS systems ensuring proper lifecycle and sealing of keys. These implementations satisfy the control inherently without requiring additional configuration.",
          "ns": "urn:maposcal:explanation-reference"
        },
        {
          "name": "control-configuration",
          "value": [],
          "ns": "urn:maposcal:configuration-reference"
        }
      ],
      "annotations": [
        {
          "name": "source-code-reference",
          "value": [
            "internal/crypto",
            "internal/auth",
            "config/config.go"
          ],
          "ns": "urn:maposcal:source-code-reference"
        }
      ],
      "statements": [
        {
          "statement-id": "sc-13_smt.a",
          "uuid": "b5c58e47-eb43-43f5-a016-0c377461aca0",
          "description": "Cryptographic uses are defined for data at rest encryption (SSE-C, SSE-S3), data in transit encryption (TLS/SSL), and authentication (AWS Signature V4 with HMAC, JWT tokens). Types of cryptography include AEAD schemes, key wrapping with KEKs, TLS protocols, and HMAC-based signatures. Key management integrates with external KMSs. These collectively fulfill the control requirements inherently."
        }
      ],
      "control_id": "sc-13"
    },
    {
      "uuid": "030fdc11-03b2-4f2f-92f4-6139f9a82f84",
      "control-id": "sc-15",
      "props": [
        {
          "name": "control-status",
          "value": "applicable and inherently satisfied",
          "ns": "urn:maposcal:control-status-reference"
        },
        {
          "name": "control-name",
          "value": "Collaborative Computing Devices and Applications",
          "ns": "urn:maposcal:control-name-reference"
        },
        {
          "name": "control-description",
          "value": "Prohibit remote activation of collaborative computing devices and applications with the following exceptions: no exceptions for computing devices ; and\n\nAdditional requirements:\n- exceptions where remote activation is to be allowed are defined;",
          "ns": "urn:maposcal:control-description-reference"
        },
        {
          "name": "control-explanation",
          "value": "The MinIO service is an object storage system focused on API-driven access with no collaborative computing devices or applications that support remote activation. All access to the service is explicitly authenticated and authorized via well-defined IAM policies without any facility for remote activation of collaborative computing capabilities. There are no exceptions needed or defined for computing devices, and the service does not include features that enable remote activation of such devices or applications. Therefore, the control is inherently satisfied by design.",
          "ns": "urn:maposcal:explanation-reference"
        },
        {
          "name": "control-configuration",
          "value": [],
          "ns": "urn:maposcal:configuration-reference"
        }
      ],
      "annotations": [
        {
          "name": "source-code-reference",
          "value": [
            "cmd/",
            "internal/",
            "docs/"
          ],
          "ns": "urn:maposcal:source-code-reference"
        }
      ],
      "statements": [
        {
          "statement-id": "sc-15_smt.a",
          "uuid": "6a8720a1-ec3c-4938-a53d-92415bd0ddb1",
          "description": "MinIO does not implement or permit any remote activation of collaborative computing devices or applications. Access is strictly controlled via authenticated API calls and IAM policies, ensuring the control is inherently satisfied."
        }
      ],
      "control_id": "sc-15"
    },
    {
      "uuid": "e1f97196-43fb-4417-85dd-a057ae2396e0",
      "control-id": "sc-20",
      "props": [
        {
          "name": "control-status",
          "value": "applicable but partially satisfied",
          "ns": "urn:maposcal:control-status-reference"
        },
        {
          "name": "control-name",
          "value": "Secure Name/Address Resolution Service (Authoritative Source)",
          "ns": "urn:maposcal:control-name-reference"
        },
        {
          "name": "control-description",
          "value": "Provide additional data origin authentication and integrity verification artifacts along with the authoritative name resolution data the system returns in response to external name/address resolution queries; and",
          "ns": "urn:maposcal:control-description-reference"
        },
        {
          "name": "control-explanation",
          "value": "MinIO does not implement an internal authoritative name/address resolution service that returns DNS or similar data directly to external clients. The system relies on external DNS infrastructure for name/address resolution and does not generate or sign DNS responses with data origin authentication or integrity verification artifacts such as DNSSEC signatures. Therefore, this control is applicable but only partially satisfied as the system depends on external authoritative sources and does not itself provide additional origin authentication or integrity verification data along with name/address resolution responses.",
          "ns": "urn:maposcal:explanation-reference"
        },
        {
          "name": "control-configuration",
          "value": [],
          "ns": "urn:maposcal:configuration-reference"
        }
      ],
      "annotations": [
        {
          "name": "source-code-reference",
          "value": [
            "internal/config/dns/operator_dns.go",
            "internal/config/dns/dns_path.go",
            "internal/config/dns/etcd_dns.go",
            "internal/config/dns/types.go"
          ],
          "ns": "urn:maposcal:source-code-reference"
        }
      ],
      "statements": [
        {
          "statement-id": "sc-20_smt.a",
          "uuid": "85b59b9d-be41-47ac-9a50-c0f2fed5e984",
          "description": "MinIO does not provide or sign authoritative name/address resolution data. It relies on external DNS services for name resolution. Therefore, MinIO does not generate data origin authentication or integrity verification artifacts such as DNSSEC signatures in responses to external resolution queries."
        }
      ],
      "control_id": "sc-20"
    },
    {
      "uuid": "634b9267-38f7-4cb3-b576-87a5b8a0b965",
      "control-id": "sc-21",
      "props": [
        {
          "name": "control-status",
          "value": "applicable and not satisfied",
          "ns": "urn:maposcal:control-status-reference"
        },
        {
          "name": "control-name",
          "value": "Secure Name/Address Resolution Service (Recursive or Caching Resolver)",
          "ns": "urn:maposcal:control-name-reference"
        },
        {
          "name": "control-description",
          "value": "Request and perform data origin authentication and data integrity verification on the name/address resolution responses the system receives from authoritative sources.",
          "ns": "urn:maposcal:control-description-reference"
        },
        {
          "name": "control-explanation",
          "value": "MinIO relies on external system DNS or configured resolvers for name/address resolution. It does not implement its own DNS resolver but uses the underlying operating system or container DNS settings. Therefore, data origin authentication and integrity verification for DNS responses depend on configuring the system or environment to use DNSSEC-validating resolvers or secure DNS protocols (e.g., DoH or DoT). This control is applicable but satisfied only through proper configuration of the environment's DNS resolver settings to ensure secure name/address resolution with data origin authentication and integrity verification.",
          "ns": "urn:maposcal:explanation-reference"
        },
        {
          "name": "control-configuration",
          "value": [],
          "ns": "urn:maposcal:configuration-reference"
        }
      ],
      "annotations": [
        {
          "name": "source-code-reference",
          "value": [
            "internal/config/dns/operator_dns.go",
            "internal/config/dns/types.go",
            "internal/config/dns/dns_path.go",
            "internal/config/dns/etcd_dns.go"
          ],
          "ns": "urn:maposcal:source-code-reference"
        }
      ],
      "statements": [
        {
          "statement-id": "sc-21_smt.a",
          "uuid": "390fc028-99ff-44d7-8ba2-64e2ea938962",
          "description": "MinIO does not implement internal DNS resolver functionality but depends on the environment's DNS resolution. The security of name/address resolution thus depends on configuring the network stack or container environment to use DNS resolvers that perform data origin authentication and integrity verification, such as DNSSEC-validating resolvers or encrypted DNS protocols. This configuration is external to MinIO and must be managed at the infrastructure or platform level."
        }
      ],
      "control_id": "sc-21"
    },
    {
      "uuid": "dfc0e3a7-ea28-435a-887f-2ae678a0832d",
      "control-id": "sc-22",
      "props": [
        {
          "name": "control-status",
          "value": "not applicable",
          "ns": "urn:maposcal:control-status-reference"
        },
        {
          "name": "control-name",
          "value": "Architecture and Provisioning for Name/Address Resolution Service",
          "ns": "urn:maposcal:control-name-reference"
        },
        {
          "name": "control-description",
          "value": "Ensure the systems that collectively provide name/address resolution service for an organization are fault-tolerant and implement internal and external role separation.",
          "ns": "urn:maposcal:control-description-reference"
        },
        {
          "name": "control-explanation",
          "value": "The MinIO service does not implement or provide name/address resolution services. It is an object storage system focused on data storage and access management, relying on external infrastructure for DNS and related name/address resolution. Therefore, this control is not applicable to the system.",
          "ns": "urn:maposcal:explanation-reference"
        },
        {
          "name": "control-configuration",
          "value": [],
          "ns": "urn:maposcal:configuration-reference"
        }
      ],
      "annotations": [
        {
          "name": "source-code-reference",
          "value": [],
          "ns": "urn:maposcal:source-code-reference"
        }
      ],
      "statements": [
        {
          "statement-id": "sc-22_smt.a",
          "uuid": "5b9ff129-e3ea-42db-9339-9044211668a5",
          "description": "MinIO does not provide name/address resolution service; this function is outside its scope and handled by external network infrastructure."
        }
      ],
      "control_id": "sc-22"
    },
    {
      "uuid": "3558039b-4e85-4c44-ba6a-d2f73ffb2a90",
      "control-id": "sc-24",
      "props": [
        {
          "name": "control-status",
          "value": "applicable but partially satisfied",
          "ns": "urn:maposcal:control-status-reference"
        },
        {
          "name": "control-name",
          "value": "Fail in Known State",
          "ns": "urn:maposcal:control-name-reference"
        },
        {
          "name": "control-description",
          "value": "Fail to a known system state to which system components fail in the event of a system failure is defined; for the following failures on the indicated components while preserving system state information to be preserved in the event of a system failure is defined; in failure: types of system failures for which the system components fail to a known state are defined;.\n\nAdditional requirements:\n- types of system failures for which the system components fail to a known state are defined;\n- known system state to which system components fail in the event of a system failure is defined;\n- system state information to be preserved in the event of a system failure is defined;",
          "ns": "urn:maposcal:control-description-reference"
        },
        {
          "name": "control-explanation",
          "value": "The MinIO service implements fail in known state partially. The system handles certain types of failures such as object healing, replication, and versioning states by preventing unsafe deletions and maintaining object retention and legal hold states, effectively preserving data integrity on failure conditions. However, explicit definitions of all failure types for which components fail to a known state are not documented in the code or configuration. The known system state is partially defined by object retention and lock status, but the system does not explicitly document failover or crash recovery states. System state information such as metadata and versioning information is preserved through object locks and metadata but there is no explicit mechanism to preserve in-memory state or system-wide state snapshots during failures. Thus, while MinIO ensures data consistency and partial fail-safe states on storage components, a comprehensive fail in known state strategy covering all system components and failure types is not fully realized or documented, representing a partial satisfaction of the control.",
          "ns": "urn:maposcal:explanation-reference"
        },
        {
          "name": "control-configuration",
          "value": [],
          "ns": "urn:maposcal:configuration-reference"
        }
      ],
      "annotations": [
        {
          "name": "source-code-reference",
          "value": [
            "internal/lifecycle/lifecycle.go",
            "cmd/server-main.go",
            "internal/obj/lifecycle.go"
          ],
          "ns": "urn:maposcal:source-code-reference"
        }
      ],
      "statements": [
        {
          "statement-id": "sc-24_smt.a",
          "uuid": "c5cbf734-37ce-4de2-8855-37e30c8e6910",
          "description": "MinIO enforces fail-safe behavior on object storage operations by preventing deletion of objects under legal hold or retention states, ensuring data preservation during certain failure conditions. However, it lacks explicit definitions and mechanisms for failing to a known system state across all failure types and system components."
        }
      ],
      "control_id": "sc-24"
    },
    {
      "uuid": "3c82be1e-2c9e-4eea-b037-cb58c9f70d2d",
      "control-id": "sc-39",
      "props": [
        {
          "name": "control-status",
          "value": "applicable and inherently satisfied",
          "ns": "urn:maposcal:control-status-reference"
        },
        {
          "name": "control-name",
          "value": "Process Isolation",
          "ns": "urn:maposcal:control-name-reference"
        },
        {
          "name": "control-description",
          "value": "Maintain a separate execution domain for each executing system process.",
          "ns": "urn:maposcal:control-description-reference"
        },
        {
          "name": "control-explanation",
          "value": "MinIO is implemented in Go and relies on the underlying operating system's process and thread management for execution. Each system process runs in its own isolated execution domain as provided by the OS. MinIO does not implement process scheduling or execution domains internally but inherits process isolation inherently from the OS environment in which it runs. This ensures separation between processes and maintains the execution domain isolation required by the control.",
          "ns": "urn:maposcal:explanation-reference"
        },
        {
          "name": "control-configuration",
          "value": [],
          "ns": "urn:maposcal:configuration-reference"
        }
      ],
      "annotations": [
        {
          "name": "source-code-reference",
          "value": [
            "internal/config/dns/dns_path.go"
          ],
          "ns": "urn:maposcal:source-code-reference"
        }
      ],
      "statements": [
        {
          "statement-id": "sc-39_smt.a",
          "uuid": "646f9eef-8ca7-46c2-ba5c-b07c4502516f",
          "description": "MinIO processes run as separate OS-level processes or goroutines managed by the Go runtime, leveraging inherent OS process isolation to maintain separate execution domains for each system process."
        }
      ],
      "control_id": "sc-39"
    },
    {
      "uuid": "651c0ea7-ad87-4362-b7aa-533c1e91ff31",
      "control-id": "sc-45",
      "props": [
        {
          "name": "control-status",
          "value": "applicable and not satisfied",
          "ns": "urn:maposcal:control-status-reference"
        },
        {
          "name": "control-name",
          "value": "System Time Synchronization",
          "ns": "urn:maposcal:control-name-reference"
        },
        {
          "name": "control-description",
          "value": "Synchronize system clocks within and between systems and system components.",
          "ns": "urn:maposcal:control-description-reference"
        },
        {
          "name": "control-explanation",
          "value": "MinIO does not implement its own system time synchronization mechanism inherently. The service relies on underlying host system time synchronization configurations (e.g., NTP or chrony) to maintain accurate and consistent system clocks. Therefore, the control is applicable but satisfied only through host-level configuration outside of MinIO's native codebase or service configuration.",
          "ns": "urn:maposcal:explanation-reference"
        },
        {
          "name": "control-configuration",
          "value": [],
          "ns": "urn:maposcal:configuration-reference"
        }
      ],
      "annotations": [
        {
          "name": "source-code-reference",
          "value": [
            "internal/dsync/drwmutex.go",
            "internal/dsync/locked_rand.go",
            "internal/deadlineconn/deadlineconn.go",
            "internal/config/batch/batch.go",
            "internal/dsync/utils.go"
          ],
          "ns": "urn:maposcal:source-code-reference"
        }
      ],
      "statements": [
        {
          "statement-id": "sc-45_smt.a",
          "uuid": "efbc9d95-1532-4571-8757-209e9dda7f2b",
          "description": "The service does not provide built-in time synchronization features; it depends on the host OS to synchronize system clocks using standard mechanisms such as NTP. This is a common practice for distributed systems like MinIO, which require consistent time but delegate time sync to infrastructure management."
        }
      ],
      "control_id": "sc-45"
    }
  ]
}