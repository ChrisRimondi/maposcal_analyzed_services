{
  "implemented_requirements": [
    {
      "uuid": "7b312a8e-31c4-4b96-9f03-1b9a811bbc1e",
      "control-id": "ac-10",
      "props": [
        {
          "name": "control-status",
          "value": "applicable and not satisfied",
          "ns": "urn:maposcal:control-status-reference"
        },
        {
          "name": "control-name",
          "value": "Concurrent Session Control",
          "ns": "urn:maposcal:control-name-reference"
        },
        {
          "name": "control-description",
          "value": "Limit the number of concurrent sessions for each accounts and/or account types for which to limit the number of concurrent sessions is defined; to the number of concurrent sessions to be allowed for each account and/or account type is defined;.\n\nAdditional requirements:\n- accounts and/or account types for which to limit the number of concurrent sessions is defined;\n- the number of concurrent sessions to be allowed for each account and/or account type is defined;",
          "ns": "urn:maposcal:control-description-reference"
        },
        {
          "name": "control-explanation",
          "value": "The service implements HTTP Basic Authentication with configurable user accounts, but does not include any built-in mechanism to limit the number of concurrent sessions per account or account type. There is no configuration or code handling concurrent session limits or tracking active sessions for accounts. The session management discussed pertains only to TLS session tickets for TLS resumption and does not enforce or limit concurrent user login sessions. Access control enforcement is minimal and delegated to external layers; no concurrent session control is inherent or configurable within the service. Therefore, this control is applicable but not satisfied, representing a security gap in limiting concurrent user sessions."
        },
        {
          "name": "control-configuration",
          "value": [],
          "ns": "urn:maposcal:configuration-reference"
        }
      ],
      "annotations": [
        {
          "name": "source-code-reference",
          "value": [
            "modules/caddyhttp/authentication/basic.go",
            "modules/caddytls/sessiontickets.go",
            "admin/api.go"
          ],
          "ns": "urn:maposcal:source-code-reference"
        }
      ],
      "statements": [
        {
          "statement-id": "ac-10_smt.a",
          "uuid": "fc551952-b942-446a-91d2-bc6a0774cb84",
          "description": "The authentication mechanism supports basic auth with static user accounts but does not provide any logic or configuration to limit or track the number of concurrent sessions per account or account type, nor does it enforce such limits. Session management is limited to TLS session tickets for TLS-level session resumption and is unrelated to user login session concurrency control."
        }
      ],
      "control_id": "ac-10"
    },
    {
      "uuid": "52ff0914-7497-42ac-99e5-4ff2ae5fe46e",
      "control-id": "ac-12",
      "props": [
        {
          "name": "control-status",
          "value": "applicable but partially satisfied",
          "ns": "urn:maposcal:control-status-reference"
        },
        {
          "name": "control-name",
          "value": "Session Termination",
          "ns": "urn:maposcal:control-name-reference"
        },
        {
          "name": "control-description",
          "value": "Automatically terminate a user session after conditions or trigger events requiring session disconnect are defined;.\n\nAdditional requirements:\n- conditions or trigger events requiring session disconnect are defined;",
          "ns": "urn:maposcal:control-description-reference"
        },
        {
          "name": "control-explanation",
          "value": "The service implements session ticket management for TLS session resumption, including key rotation and secure ephemeral key generation, which supports session lifecycle management on the transport layer. However, the service does not implement explicit user session termination or automatic disconnection based on application-level conditions or trigger events, such as idle timeout, user logout, or authorization changes. No configuration or code was found that automatically terminates HTTP user sessions or enforces session disconnect triggers beyond TLS session ticket expiration. Therefore, while some transport-level session controls exist, application-level session termination as required by AC-12 is only partially satisfied.",
          "ns": "urn:maposcal:explanation-reference"
        },
        {
          "name": "control-configuration",
          "value": [],
          "ns": "urn:maposcal:configuration-reference"
        }
      ],
      "annotations": [
        {
          "name": "source-code-reference",
          "value": [
            "modules/caddyhttp/server.go",
            "modules/caddyhttp/http2listener.go",
            "modules/caddyhttp/tracing/tracerprovider.go"
          ],
          "ns": "urn:maposcal:source-code-reference"
        }
      ],
      "statements": [
        {
          "statement-id": "ac-12_smt.a",
          "uuid": "840ef6e8-0fc9-4233-919d-e160929a1cf6",
          "description": "TLS session ticket keys are rotated and securely managed, supporting session lifecycle at the transport level. However, no explicit application-level session termination mechanisms or automatic disconnect triggers are implemented."
        }
      ],
      "control_id": "ac-12"
    },
    {
      "uuid": "e1fe3e97-5084-4ea5-be55-6994e4a472b1",
      "control-id": "ac-3",
      "props": [
        {
          "name": "control-status",
          "value": "applicable but partially satisfied",
          "ns": "urn:maposcal:control-status-reference"
        },
        {
          "name": "control-name",
          "value": "Access Enforcement",
          "ns": "urn:maposcal:control-name-reference"
        },
        {
          "name": "control-description",
          "value": "Enforce approved authorizations for logical access to information and system resources in accordance with applicable access control policies.",
          "ns": "urn:maposcal:control-description-reference"
        },
        {
          "name": "control-explanation",
          "value": "The service enforces access control through HTTP Basic Authentication middleware which supports configurable user accounts and secure password hashing. This middleware provides logical access enforcement for endpoints where it is explicitly configured. However, critical admin API endpoints including /metrics and /reverse_proxy/upstreams do not have built-in authentication or authorization enforcement in the code. Access control for these endpoints must be managed externally (e.g., via network policies or reverse proxy ACLs). There is no built-in fine-grained authorization or role-based access control in the service. Therefore, the control is applicable but only partially satisfied due to missing enforcement on some sensitive endpoints and reliance on external mechanisms for full access enforcement.",
          "ns": "urn:maposcal:explanation-reference"
        },
        {
          "name": "control-configuration",
          "value": [],
          "ns": "urn:maposcal:configuration-reference"
        }
      ],
      "annotations": [
        {
          "name": "source-code-reference",
          "value": [
            "modules/caddypki/adminapi.go",
            "modules/caddypki/acmeserver/policy.go"
          ],
          "ns": "urn:maposcal:source-code-reference"
        }
      ],
      "statements": [
        {
          "statement-id": "ac-3_smt.a",
          "uuid": "16db4f97-0d18-4810-b23c-c431d4b57989",
          "description": "Access enforcement is implemented by HTTP Basic Authentication middleware which enforces user authentication for configured endpoints. However, several administrative and operational endpoints lack built-in authorization, relying on deployment environment controls."
        }
      ],
      "control_id": "ac-3"
    },
    {
      "uuid": "bfe16ae0-f3d2-4669-8f2f-2611a9190980",
      "control-id": "ac-9",
      "props": [
        {
          "name": "control-status",
          "value": "applicable and not satisfied",
          "ns": "urn:maposcal:control-status-reference"
        },
        {
          "name": "control-name",
          "value": "Previous Logon Notification",
          "ns": "urn:maposcal:control-name-reference"
        },
        {
          "name": "control-description",
          "value": "Notify the user, upon successful logon to the system, of the date and time of the last logon.",
          "ns": "urn:maposcal:control-description-reference"
        },
        {
          "name": "control-explanation",
          "value": "The service does not implement any functionality to notify users upon successful logon of the date and time of the last logon. Authentication is primarily handled via HTTP Basic Authentication middleware without user notification features. There is no code or configuration supporting previous logon notification, representing a gap in this control's implementation.",
          "ns": "urn:maposcal:explanation-reference"
        },
        {
          "name": "control-configuration",
          "value": [],
          "ns": "urn:maposcal:configuration-reference"
        }
      ],
      "annotations": [
        {
          "name": "source-code-reference",
          "value": [
            "notify/notify_linux.go",
            "notify/notify_windows.go",
            "modules/caddyhttp/tracing/tracerprovider.go",
            "service_windows.go",
            "modules/caddyhttp/http2listener.go"
          ],
          "ns": "urn:maposcal:source-code-reference"
        }
      ],
      "statements": [
        {
          "statement-id": "ac-9_smt.a",
          "uuid": "621855dc-370d-4b75-ba57-83b6596025ef",
          "description": "No implementation or configuration is present in the service to notify users of previous logon date and time upon successful authentication. The service focuses on HTTP Basic Authentication and does not include user session or login notification features."
        }
      ],
      "control_id": "ac-9"
    },
    {
      "uuid": "47858f06-1d0e-421a-b009-f9ecd5eac49a",
      "control-id": "au-10",
      "props": [
        {
          "name": "control-status",
          "value": "applicable but partially satisfied",
          "ns": "urn:maposcal:control-status-reference"
        },
        {
          "name": "control-name",
          "value": "Non-repudiation",
          "ns": "urn:maposcal:control-name-reference"
        },
        {
          "name": "control-description",
          "value": "Provide irrefutable evidence that an individual (or process acting on behalf of an individual) has performed actions to be covered by non-repudiation are defined;.\n\nAdditional requirements:\n- actions to be covered by non-repudiation are defined;",
          "ns": "urn:maposcal:control-description-reference"
        },
        {
          "name": "control-explanation",
          "value": "The service implements structured, JSON-formatted logging with redaction of sensitive information and captures detailed operational events including administrative actions and errors, which provides foundational audit trails for non-repudiation. However, critical admin and operational endpoints such as /metrics and /reverse_proxy/upstreams do not enforce authentication or authorization, and no explicit access auditing or tamper-proof logging mechanisms are implemented within the service. Additionally, there is no internal definition or configuration that explicitly specifies which actions require non-repudiation coverage. Therefore, while logging supports partial non-repudiation, the absence of enforced access controls and explicit action definitions represents a gap in fully satisfying the control requirements.",
          "ns": "urn:maposcal:explanation-reference"
        },
        {
          "name": "control-configuration",
          "value": [],
          "ns": "urn:maposcal:configuration-reference"
        }
      ],
      "annotations": [
        {
          "name": "source-code-reference",
          "value": [
            "modules/caddyhttp/tracing/tracerprovider.go",
            "sigtrap.go",
            "modules/caddyhttp/proxyprotocol/policy.go"
          ],
          "ns": "urn:maposcal:source-code-reference"
        }
      ],
      "statements": [
        {
          "statement-id": "au-10_smt.a",
          "uuid": "c2cb44a1-6270-4864-980b-9985cf3e1fde",
          "description": "The service uses structured logging (zap) to capture detailed operational and administrative events, supporting audit trails. Sensitive data is redacted by default in logs. However, there is no built-in authentication or authorization enforcement on critical admin endpoints, nor explicit logging of access attempts or actions specific to non-repudiation. Actions covered by non-repudiation are not explicitly defined or configurable within the service."
        }
      ],
      "control_id": "au-10"
    },
    {
      "uuid": "a7352655-5a6c-45e5-aaf2-11f19d954def",
      "control-id": "au-3",
      "props": [
        {
          "name": "control-status",
          "value": "applicable and not satisfied",
          "ns": "urn:maposcal:control-status-reference"
        },
        {
          "name": "control-name",
          "value": "Content of Audit Records",
          "ns": "urn:maposcal:control-name-reference"
        },
        {
          "name": "control-description",
          "value": "Ensure that audit records contain information that establishes the following:",
          "ns": "urn:maposcal:control-description-reference"
        },
        {
          "name": "control-explanation",
          "value": "The service uses structured logging via zap throughout all major modules including HTTP server, TLS, PKI, reverse proxy, and ACME server. Audit logs contain JSON structured entries with contextual fields capturing request details, upstream information, durations, status codes, and errors, which establish the required audit record content. Sensitive information like authorization headers and cookies is redacted by default to protect sensitive data. However, audit record content depends on configuration of logging levels and fields, so the control is satisfied only through proper configuration of the logging system and its filters."
        },
        {
          "name": "control-configuration",
          "value": [],
          "ns": "urn:maposcal:configuration-reference"
        }
      ],
      "annotations": [
        {
          "name": "source-code-reference",
          "value": [
            "modules/caddypki/adminapi.go",
            "modules/caddypki/pki.go",
            "modules/caddypki/maintain.go"
          ],
          "ns": "urn:maposcal:source-code-reference"
        }
      ],
      "statements": [
        {
          "statement-id": "au-3_smt.a",
          "uuid": "9d9e0943-d8a2-4ca7-8271-3deb3827784c",
          "description": "Audit records use zap structured logging with JSON format including request and response context, upstream details, error reporting, and timing information, ensuring content meets audit requirements when configured appropriately."
        }
      ],
      "control_id": "au-3"
    },
    {
      "uuid": "478475e6-a958-47cb-b6df-e4ddb6a0756f",
      "control-id": "au-9",
      "props": [
        {
          "name": "control-status",
          "value": "applicable but partially satisfied",
          "ns": "urn:maposcal:control-status-reference"
        },
        {
          "name": "control-name",
          "value": "Protection of Audit Information",
          "ns": "urn:maposcal:control-name-reference"
        },
        {
          "name": "control-description",
          "value": "Protect audit information and audit logging tools from unauthorized access, modification, and deletion; and\n\nAdditional requirements:\n- personnel or roles to be alerted upon detection of unauthorized access, modification, or deletion of audit information is/are defined;",
          "ns": "urn:maposcal:control-description-reference"
        },
        {
          "name": "control-explanation",
          "value": "The service implements structured audit logging using the zap logging library with JSON-formatted logs that include contextual information for auditing purposes. Sensitive information is redacted by default in logs, protecting audit data from inadvertent exposure. However, there are no built-in mechanisms to restrict access, modification, or deletion of audit logs within the service itself; access control is delegated externally. Additionally, no personnel or roles are defined in the system to be alerted upon detection of unauthorized audit information access or modification. The service lacks built-in alerting or monitoring for audit log integrity. Consequently, while audit information is protected from direct exposure by redaction and structured logging, the control is only partially satisfied due to missing enforcement of access protection and alerting requirements.",
          "ns": "urn:maposcal:explanation-reference"
        },
        {
          "name": "control-configuration",
          "value": [],
          "ns": "urn:maposcal:configuration-reference"
        }
      ],
      "annotations": [
        {
          "name": "source-code-reference",
          "value": [
            "modules/caddyhttp/marshalers.go",
            "modules/metrics/adminmetrics.go",
            "modules/caddypki/adminapi.go"
          ],
          "ns": "urn:maposcal:source-code-reference"
        }
      ],
      "statements": [
        {
          "statement-id": "au-9_smt.a",
          "uuid": "6a559f66-5882-437b-a4bf-749d06a59e30",
          "description": "Audit information is generated via structured, JSON-formatted logs using zap, with sensitive data redacted by default. However, audit logs and logging tools are not protected by internal access controls or authorization mechanisms, leaving protection dependent on external controls. The system does not define personnel or roles to receive alerts upon unauthorized audit information access, modification, or deletion. No built-in alerting mechanisms exist for audit log integrity events."
        }
      ],
      "control_id": "au-9"
    },
    {
      "uuid": "7720526e-96ae-4664-b006-2e1eb14dfe73",
      "control-id": "cm-5",
      "props": [
        {
          "name": "control-status",
          "value": "applicable but partially satisfied",
          "ns": "urn:maposcal:control-status-reference"
        },
        {
          "name": "control-name",
          "value": "Access Restrictions for Change",
          "ns": "urn:maposcal:control-name-reference"
        },
        {
          "name": "control-description",
          "value": "Define, document, approve, and enforce physical and logical access restrictions associated with changes to the system.",
          "ns": "urn:maposcal:control-description-reference"
        },
        {
          "name": "control-explanation",
          "value": "The system enforces logical access restrictions through HTTP Basic Authentication middleware, which can be configured with user accounts and bcrypt password hashing to control access to certain endpoints. However, critical operational and administrative endpoints such as /metrics and /reverse_proxy/upstreams do not enforce authentication or authorization checks in the codebase. Physical access restrictions and formal documented change approval processes are not addressed within the system itself and are expected to be managed externally. Therefore, while some logical access restrictions exist via configurable middleware, there is a gap in enforcement for key change-related interfaces and no inherent or documented physical access controls within the system.",
          "ns": "urn:maposcal:explanation-reference"
        },
        {
          "name": "control-configuration",
          "value": [],
          "ns": "urn:maposcal:configuration-reference"
        }
      ],
      "annotations": [
        {
          "name": "source-code-reference",
          "value": [
            "modules/caddypki/adminapi.go"
          ],
          "ns": "urn:maposcal:source-code-reference"
        }
      ],
      "statements": [
        {
          "statement-id": "cm-5_smt.a",
          "uuid": "69742280-43ce-42f2-87d6-226d42e06626",
          "description": "Logical access restrictions for changes are partially implemented via HTTP Basic Authentication middleware with configurable users, but key admin endpoints lack enforced access controls, and no physical access restrictions or formal change approval mechanisms are implemented internally."
        }
      ],
      "control_id": "cm-5"
    },
    {
      "uuid": "57b301e4-57d5-4e93-b617-39779d087027",
      "control-id": "ia-6",
      "props": [
        {
          "name": "control-status",
          "value": "applicable but partially satisfied",
          "ns": "urn:maposcal:control-status-reference"
        },
        {
          "name": "control-name",
          "value": "Authentication Feedback",
          "ns": "urn:maposcal:control-name-reference"
        },
        {
          "name": "control-description",
          "value": "Obscure feedback of authentication information during the authentication process to protect the information from possible exploitation and use by unauthorized individuals.",
          "ns": "urn:maposcal:control-description-reference"
        },
        {
          "name": "control-explanation",
          "value": "The service implements HTTP Basic Authentication with bcrypt password hashing, secure constant-time password comparison, and mitigations against timing attacks and user enumeration via fake password generation. This provides obscured feedback on authentication failures, reducing information disclosure risks. However, no explicit configuration or code was found that controls or customizes authentication failure messages or feedback at the HTTP response level. Access control enforcement is delegated to middleware, and some critical admin endpoints lack authentication, potentially exposing sensitive operational information. Therefore, while cryptographic and password verification feedback is obscured, overall feedback mechanisms and access controls on endpoints represent a partial implementation with gaps in feedback obscurity and exposure control.",
          "ns": "urn:maposcal:explanation-reference"
        },
        {
          "name": "control-configuration",
          "value": [],
          "ns": "urn:maposcal:configuration-reference"
        }
      ],
      "annotations": [
        {
          "name": "source-code-reference",
          "value": [
            "modules/caddyhttp/middleware/basic_auth.go",
            "modules/caddyhttp/marshalers.go",
            "modules/caddypki/acmeserver/policy.go"
          ],
          "ns": "urn:maposcal:source-code-reference"
        }
      ],
      "statements": [
        {
          "statement-id": "ia-6_smt.a",
          "uuid": "00f5e1e7-caef-46c8-b865-4e7d1761e7de",
          "description": "Authentication uses bcrypt hashing with a high cost factor, secure constant-time comparison, and fake password generation to obscure authentication failure feedback and mitigate timing attacks, reducing information leakage during the authentication process."
        }
      ],
      "control_id": "ia-6"
    },
    {
      "uuid": "c0af2060-858e-44bd-8621-948ad50327f8",
      "control-id": "ia-8",
      "props": [
        {
          "name": "control-status",
          "value": "applicable but partially satisfied",
          "ns": "urn:maposcal:control-status-reference"
        },
        {
          "name": "control-name",
          "value": "Identification and Authentication (Non-organizational Users)",
          "ns": "urn:maposcal:control-name-reference"
        },
        {
          "name": "control-description",
          "value": "Uniquely identify and authenticate non-organizational users or processes acting on behalf of non-organizational users.",
          "ns": "urn:maposcal:control-description-reference"
        },
        {
          "name": "control-explanation",
          "value": "The service supports HTTP Basic Authentication middleware that uniquely identifies and authenticates non-organizational users using static configuration of user accounts with bcrypt-hashed passwords. Secure password comparison mitigates timing attacks, and authentication state is available in request context. However, critical admin and operational endpoints (e.g., /metrics, /reverse_proxy/upstreams) do not enforce authentication or authorization, representing a gap in comprehensive identification and authentication coverage for non-organizational users or processes acting on their behalf. Access control for these endpoints must be implemented externally.",
          "ns": "urn:maposcal:explanation-reference"
        },
        {
          "name": "control-configuration",
          "value": [],
          "ns": "urn:maposcal:configuration-reference"
        }
      ],
      "annotations": [
        {
          "name": "source-code-reference",
          "value": [
            "modules/caddyhttp/caddyauth/caddyauth.go",
            "modules/caddypki/adminapi.go"
          ],
          "ns": "urn:maposcal:source-code-reference"
        }
      ],
      "statements": [
        {
          "statement-id": "ia-8_smt.a",
          "uuid": "fbe6586d-10b0-47a0-b63c-59212371a625",
          "description": "HTTP Basic Authentication middleware provides unique identification and authentication of non-organizational users through static user account configuration with bcrypt password hashes and mitigations against timing attacks."
        }
      ],
      "control_id": "ia-8"
    },
    {
      "uuid": "90c06e49-b8ba-45a7-b8b8-e7e8fb6e9a49",
      "control-id": "sc-23",
      "props": [
        {
          "name": "control-status",
          "value": "applicable and not satisfied",
          "ns": "urn:maposcal:control-status-reference"
        },
        {
          "name": "control-name",
          "value": "Session Authenticity",
          "ns": "urn:maposcal:control-name-reference"
        },
        {
          "name": "control-description",
          "value": "Protect the authenticity of communications sessions.",
          "ns": "urn:maposcal:control-description-reference"
        },
        {
          "name": "control-explanation",
          "value": "The service ensures session authenticity primarily through TLS sessions with session ticket management. TLS session resumption is handled via a session ticket service that uses securely generated ephemeral keys with automatic key rotation, ensuring the authenticity and integrity of session resumptions. However, authentication enforcement on admin and operational endpoints is not inherent and depends on deployment-time configuration. Access control middleware for endpoints such as /metrics and /reverse_proxy/upstreams is not enabled by default and must be configured to prevent unauthorized access, which is critical to protecting session authenticity in communications. Therefore, session authenticity is satisfied only when proper authentication middleware and secure network access controls are configured.",
          "ns": "urn:maposcal:explanation-reference"
        },
        {
          "name": "control-configuration",
          "value": [],
          "ns": "urn:maposcal:configuration-reference"
        }
      ],
      "annotations": [
        {
          "name": "source-code-reference",
          "value": [
            "modules/caddytls/sessiontickets.go"
          ],
          "ns": "urn:maposcal:source-code-reference"
        }
      ],
      "statements": [
        {
          "statement-id": "sc-23_smt.a",
          "uuid": "f62aa505-36b6-4456-b1f3-6910838a5d99",
          "description": "Session ticket service manages TLS session resumption with securely generated random keys and automatic key rotation, protecting session authenticity. However, authentication enforcement on sensitive endpoints is not inherent and requires configuration."
        }
      ],
      "control_id": "sc-23"
    },
    {
      "uuid": "891a5e32-583b-4adb-a3c8-983ff2013923",
      "control-id": "sc-24",
      "props": [
        {
          "name": "control-status",
          "value": "applicable but partially satisfied",
          "ns": "urn:maposcal:control-status-reference"
        },
        {
          "name": "control-name",
          "value": "Fail in Known State",
          "ns": "urn:maposcal:control-name-reference"
        },
        {
          "name": "control-description",
          "value": "Fail to a known system state to which system components fail in the event of a system failure is defined; for the following failures on the indicated components while preserving system state information to be preserved in the event of a system failure is defined; in failure: types of system failures for which the system components fail to a known state are defined;.\n\nAdditional requirements:\n- types of system failures for which the system components fail to a known state are defined;\n- known system state to which system components fail in the event of a system failure is defined;\n- system state information to be preserved in the event of a system failure is defined;",
          "ns": "urn:maposcal:control-description-reference"
        },
        {
          "name": "control-explanation",
          "value": "The service operates as a robust HTTP server and reverse proxy with modular components. It uses Go, a memory-safe language, and manages TLS session tickets with secure ephemeral keys that are rotated and zeroed in memory, which partially addresses failing to a known secure state in cryptographic components. However, there is no explicit documentation or configuration found that defines or enforces the exact 'known system state' to which components revert upon failures such as process crashes, network failures, or internal errors. Persistence of system state information in failure scenarios is not clearly defined or implemented within the service. The system relies on external process managers or OS-level supervision for recovery and restart, without built-in fail-safe state definitions or rollbacks. Therefore, while some cryptographic components handle secure ephemeral data safely, the overall system does not fully satisfy SC-24, and gaps remain in defining failure types, known fallback states, and preserved system state information.",
          "ns": "urn:maposcal:explanation-reference"
        },
        {
          "name": "control-configuration",
          "value": [],
          "ns": "urn:maposcal:configuration-reference"
        }
      ],
      "annotations": [
        {
          "name": "source-code-reference",
          "value": [
            "modules/caddytls/automation.go",
            "service_windows.go",
            "modules/caddyhttp/errors.go",
            "modules/caddyhttp/tracing/tracerprovider.go"
          ],
          "ns": "urn:maposcal:source-code-reference"
        }
      ],
      "statements": [
        {
          "statement-id": "sc-24_smt.a",
          "uuid": "f4064a8d-85c3-4763-b30b-e1aa6bfce10e",
          "description": "Cryptographic components such as TLS session ticket management employ secure ephemeral keys with rotation and memory zeroing to protect state, but the system lacks explicit definitions or mechanisms for failing to a known system state on broader system failures, including application crashes or network issues. System state preservation is not clearly implemented internally, relying instead on external process supervision."
        }
      ],
      "control_id": "sc-24"
    },
    {
      "uuid": "3a732edd-3001-4d05-8d02-ae6c88ffab75",
      "control-id": "sc-3",
      "props": [
        {
          "name": "control-status",
          "value": "applicable but partially satisfied",
          "ns": "urn:maposcal:control-status-reference"
        },
        {
          "name": "control-name",
          "value": "Security Function Isolation",
          "ns": "urn:maposcal:control-name-reference"
        },
        {
          "name": "control-description",
          "value": "Isolate security functions from nonsecurity functions.",
          "ns": "urn:maposcal:control-description-reference"
        },
        {
          "name": "control-explanation",
          "value": "The service implements modular architecture separating key security functions such as TLS management, ACME server, certificate issuance, and authentication middleware into distinct components. This modular design inherently isolates security functions like certificate management and authentication from nonsecurity functions such as reverse proxying and metrics collection. However, critical admin and operational endpoints (e.g., /metrics and /reverse_proxy/upstreams) do not enforce built-in authentication or authorization, thus security functions are not fully isolated at the access control layer. Isolation relies on external deployment configurations (e.g., firewall, network policies) to prevent unauthorized access, representing a partial satisfaction of the control requirements.",
          "ns": "urn:maposcal:explanation-reference"
        },
        {
          "name": "control-configuration",
          "value": [],
          "ns": "urn:maposcal:configuration-reference"
        }
      ],
      "annotations": [
        {
          "name": "source-code-reference",
          "value": [
            "modules/caddypki/acmeserver/challenges.go",
            "sigtrap_posix.go",
            "modules/caddytls/values.go"
          ],
          "ns": "urn:maposcal:source-code-reference"
        }
      ],
      "statements": [
        {
          "statement-id": "sc-3_smt.a",
          "uuid": "e50665ab-7cfc-47c7-882b-8a2a68bc63eb",
          "description": "The modular architecture separates security-sensitive components such as TLS session ticket management, certificate authority functions, and authentication middleware from nonsecurity functions like reverse proxy and metrics. However, lack of built-in access controls on admin endpoints necessitates external configurations to maintain isolation."
        }
      ],
      "control_id": "sc-3"
    },
    {
      "uuid": "8cdf1b56-653b-423b-87ea-5393b278cce4",
      "control-id": "sc-39",
      "props": [
        {
          "name": "control-status",
          "value": "applicable and inherently satisfied",
          "ns": "urn:maposcal:control-status-reference"
        },
        {
          "name": "control-name",
          "value": "Process Isolation",
          "ns": "urn:maposcal:control-name-reference"
        },
        {
          "name": "control-description",
          "value": "Maintain a separate execution domain for each executing system process.",
          "ns": "urn:maposcal:control-description-reference"
        },
        {
          "name": "control-explanation",
          "value": "The service is implemented in Go, a memory-safe language that inherently provides process isolation by running each execution context in separate goroutines managed by the Go runtime. Additionally, the service runs as a standard operating system process and relies on the OS to maintain separate execution domains for system processes. No shared memory or unsafe concurrency primitives are used that would violate process isolation requirements.",
          "ns": "urn:maposcal:explanation-reference"
        },
        {
          "name": "control-configuration",
          "value": [],
          "ns": "urn:maposcal:configuration-reference"
        }
      ],
      "annotations": [
        {
          "name": "source-code-reference",
          "value": [
            "cmd/removebinary.go",
            "notify/notify_linux.go",
            "service_windows.go",
            "modules/caddyhttp/tracing/tracerprovider.go"
          ],
          "ns": "urn:maposcal:source-code-reference"
        }
      ],
      "statements": [
        {
          "statement-id": "sc-39_smt.a",
          "uuid": "821b21f0-0c6a-4a5f-9926-21cd8a4e12c6",
          "description": "The service relies on the operating system's process model and Go's runtime to maintain separate execution domains for each system process, ensuring process isolation inherently without additional configuration."
        }
      ],
      "control_id": "sc-39"
    },
    {
      "uuid": "f81ab48d-33a3-4816-b636-5ec6a931cdb4",
      "control-id": "sc-4",
      "props": [
        {
          "name": "control-status",
          "value": "applicable but partially satisfied",
          "ns": "urn:maposcal:control-status-reference"
        },
        {
          "name": "control-name",
          "value": "Information in Shared System Resources",
          "ns": "urn:maposcal:control-name-reference"
        },
        {
          "name": "control-description",
          "value": "Prevent unauthorized and unintended information transfer via shared system resources.",
          "ns": "urn:maposcal:control-description-reference"
        },
        {
          "name": "control-explanation",
          "value": "The service operates as a network-facing HTTP server and reverse proxy with shared resources such as TLS session ticket keys, certificate storage, and metrics endpoints. Cryptographic materials are managed securely with rotating keys and secure storage. Sensitive information in logs is redacted by default. However, critical administrative and operational endpoints (e.g., /metrics, /reverse_proxy/upstreams) do not enforce built-in authentication or authorization, relying instead on external controls. Thus, while some protections against unauthorized information transfer exist inherently (e.g., secure key handling, redacted logs), the lack of enforced access controls on shared system resources presents a partial gap that could allow unintended information disclosure.",
          "ns": "urn:maposcal:explanation-reference"
        },
        {
          "name": "control-configuration",
          "value": [],
          "ns": "urn:maposcal:configuration-reference"
        }
      ],
      "annotations": [
        {
          "name": "source-code-reference",
          "value": [
            "metrics.go",
            "reverseproxy.go",
            "adminapi.go",
            "tls.go",
            "certmagic_storage.go"
          ],
          "ns": "urn:maposcal:source-code-reference"
        }
      ],
      "statements": [
        {
          "statement-id": "sc-4_smt.a",
          "uuid": "040ae9ab-57c9-433c-a371-5378bf28a2e3",
          "description": "The service securely manages shared cryptographic resources such as TLS session ticket keys and certificate storage, including automatic key rotation and secure ephemeral key handling. Logs redact sensitive headers and information by default. However, administrative endpoints exposing metrics and proxy configuration do not enforce authentication or authorization checks within the service, relying on external deployment configurations for access control. This introduces a risk of unauthorized information disclosure through shared system resources, indicating only partial satisfaction of the control."
        }
      ],
      "control_id": "sc-4"
    },
    {
      "uuid": "aa40b6c7-34c5-41eb-a8c2-7d9ec5148cb1",
      "control-id": "si-10",
      "props": [
        {
          "name": "control-status",
          "value": "applicable but partially satisfied",
          "ns": "urn:maposcal:control-status-reference"
        },
        {
          "name": "control-name",
          "value": "Information Input Validation",
          "ns": "urn:maposcal:control-name-reference"
        },
        {
          "name": "control-description",
          "value": "Check the validity of the following information inputs: information inputs to the system requiring validity checks are defined;.\n\nAdditional requirements:\n- information inputs to the system requiring validity checks are defined;",
          "ns": "urn:maposcal:control-description-reference"
        },
        {
          "name": "control-explanation",
          "value": "The service implements some input validation through authentication modules (e.g., Basic Auth middleware with password validation and constant-time comparisons) and ACME challenge validation. However, input validation coverage is partial as the service lacks comprehensive validation for all system inputs, especially within the reverse proxy, admin API endpoints, and configuration inputs. Additionally, there is no evidence of fine-grained validation rules or whitelisting of input formats beyond authentication credentials and ACME challenge types, which may leave gaps in input validation and increase risk of malformed or malicious input affecting system behavior.",
          "ns": "urn:maposcal:explanation-reference"
        },
        {
          "name": "control-configuration",
          "value": [],
          "ns": "urn:maposcal:configuration-reference"
        }
      ],
      "annotations": [
        {
          "name": "source-code-reference",
          "value": [
            "modules/caddyhttp/responsematchers.go",
            "modules/caddyhttp/errors.go",
            "modules/caddypki/acmeserver/challenges.go"
          ],
          "ns": "urn:maposcal:source-code-reference"
        }
      ],
      "statements": [
        {
          "statement-id": "si-10_smt.a",
          "uuid": "7a4c2e2a-af0e-49c7-86da-f7d6ff216067",
          "description": "Partial input validation is performed in authentication modules verifying credentials and password hashes, and in the ACME server which validates challenge types. However, other inputs such as admin API parameters, reverse proxy configurations, and HTTP request payloads do not have explicit, enforced validity checks in the codebase."
        }
      ],
      "control_id": "si-10"
    },
    {
      "uuid": "0424ac34-e1a4-4a27-9d8d-785384009550",
      "control-id": "si-16",
      "props": [
        {
          "name": "control-status",
          "value": "applicable and inherently satisfied",
          "ns": "urn:maposcal:control-status-reference"
        },
        {
          "name": "control-name",
          "value": "Memory Protection",
          "ns": "urn:maposcal:control-name-reference"
        },
        {
          "name": "control-description",
          "value": "Implement the following controls to protect the system memory from unauthorized code execution: controls to be implemented to protect the system memory from unauthorized code execution are defined;.\n\nAdditional requirements:\n- controls to be implemented to protect the system memory from unauthorized code execution are defined;",
          "ns": "urn:maposcal:control-description-reference"
        },
        {
          "name": "control-explanation",
          "value": "The service is implemented in Go, a memory-safe language that inherently provides protections against unauthorized code execution such as buffer overflows and memory corruption. Additionally, the service relies on underlying OS and runtime protections for memory safety. No explicit configuration is needed to enforce memory protection controls as these are inherently provided by the language and runtime environment.",
          "ns": "urn:maposcal:explanation-reference"
        },
        {
          "name": "control-configuration",
          "value": [],
          "ns": "urn:maposcal:configuration-reference"
        }
      ],
      "annotations": [
        {
          "name": "source-code-reference",
          "value": [
            "cmd/removebinary.go",
            "cmd/removebinary_windows.go",
            "sigtrap.go",
            "sigtrap_posix.go"
          ],
          "ns": "urn:maposcal:source-code-reference"
        }
      ],
      "statements": [
        {
          "statement-id": "si-16_smt.a",
          "uuid": "ac1464ba-a23e-461e-a9d6-928393415c6f",
          "description": "The control is inherently satisfied due to the use of Go as the implementation language, which provides memory safety guarantees. No additional configuration or controls are required to prevent unauthorized code execution in system memory."
        }
      ],
      "control_id": "si-16"
    }
  ]
}