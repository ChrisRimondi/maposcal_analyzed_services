{
  "implemented_requirements": [
    {
      "uuid": "ea855b4f-4f85-4fe5-ab6a-0f3395e34c0d",
      "control-id": "ac-10",
      "props": [
        {
          "name": "control-status",
          "value": "applicable and not satisfied",
          "ns": "urn:maposcal:control-status-reference"
        },
        {
          "name": "control-name",
          "value": "Concurrent Session Control",
          "ns": "urn:maposcal:control-name-reference"
        },
        {
          "name": "control-description",
          "value": "Limit the number of concurrent sessions for each accounts and/or account types for which to limit the number of concurrent sessions is defined; to the number of concurrent sessions to be allowed for each account and/or account type is defined;.\n\nAdditional requirements:\n- accounts and/or account types for which to limit the number of concurrent sessions is defined;\n- the number of concurrent sessions to be allowed for each account and/or account type is defined;",
          "ns": "urn:maposcal:control-description-reference"
        },
        {
          "name": "control-explanation",
          "value": "The service uses Basic HTTP Authentication which is stateless and does not implement any session management. There is no built-in functionality to track or limit the number of concurrent sessions per account or account type. Since authentication credentials are sent with each request and no session tokens or session stores are maintained, the service cannot inherently or through configuration enforce limits on concurrent sessions. Therefore, this control is applicable but not satisfied by the service.",
          "ns": "urn:maposcal:explanation-reference"
        },
        {
          "name": "control-configuration",
          "value": [],
          "ns": "urn:maposcal:configuration-reference"
        }
      ],
      "annotations": [
        {
          "name": "source-code-reference",
          "value": [
            "middleware_basic_auth.go",
            "routergroup.go"
          ],
          "ns": "urn:maposcal:source-code-reference"
        }
      ],
      "statements": [
        {
          "statement-id": "ac-10_smt.a",
          "uuid": "39d21584-becc-430c-9a2d-1e99c129581e",
          "description": "No session management or session tracking is implemented in the service; authentication is stateless Basic Auth with credentials validated per request, thus no limits on concurrent sessions per account or account type are enforced."
        }
      ],
      "control_id": "ac-10"
    },
    {
      "uuid": "919f4bc9-fef9-41c9-86f5-88df1fc381ec",
      "control-id": "ac-12",
      "props": [
        {
          "name": "control-status",
          "value": "applicable and not satisfied",
          "ns": "urn:maposcal:control-status-reference"
        },
        {
          "name": "control-name",
          "value": "Session Termination",
          "ns": "urn:maposcal:control-name-reference"
        },
        {
          "name": "control-description",
          "value": "Automatically terminate a user session after conditions or trigger events requiring session disconnect are defined;.\n\nAdditional requirements:\n- conditions or trigger events requiring session disconnect are defined;",
          "ns": "urn:maposcal:control-description-reference"
        },
        {
          "name": "control-explanation",
          "value": "The service uses Basic HTTP Authentication which is stateless and does not maintain server-side user sessions. There is no built-in session management or token-based authentication, and thus no mechanism to automatically terminate user sessions after trigger events. Since each request is authenticated independently, session termination is not applicable as a traditional session does not exist. However, the control is applicable because user session-like behavior is implicitly present via authenticated requests, but the service does not provide any automatic disconnection or session expiration mechanisms, representing a compliance gap.",
          "ns": "urn:maposcal:explanation-reference"
        },
        {
          "name": "control-configuration",
          "value": [],
          "ns": "urn:maposcal:configuration-reference"
        }
      ],
      "annotations": [
        {
          "name": "source-code-reference",
          "value": [
            "authentication_basic.go",
            "middleware.go"
          ],
          "ns": "urn:maposcal:source-code-reference"
        }
      ],
      "statements": [
        {
          "statement-id": "ac-12_smt.a",
          "uuid": "cd5c5fde-964b-4dca-9592-dfdcd77a78a9",
          "description": "The control is not satisfied because the framework relies on stateless Basic Auth per request and does not implement session state or automatic session termination after trigger events."
        }
      ],
      "control_id": "ac-12"
    },
    {
      "uuid": "4078b305-8f54-4279-9a7c-b08aa4f0ff43",
      "control-id": "ac-3",
      "props": [
        {
          "name": "control-status",
          "value": "applicable but partially satisfied",
          "ns": "urn:maposcal:control-status-reference"
        },
        {
          "name": "control-name",
          "value": "Access Enforcement",
          "ns": "urn:maposcal:control-name-reference"
        },
        {
          "name": "control-description",
          "value": "Enforce approved authorizations for logical access to information and system resources in accordance with applicable access control policies.",
          "ns": "urn:maposcal:control-description-reference"
        },
        {
          "name": "control-explanation",
          "value": "The service provides Basic Authentication middleware that enforces user authentication on selected routes using in-memory user/password maps, ensuring approved logical access at the middleware level. However, it does not implement any built-in fine-grained authorization or dynamic access control policies. Authorization enforcement is left to user-defined middleware or handlers, representing a partial satisfaction of the control. Access enforcement depends on correct middleware configuration by the user.",
          "ns": "urn:maposcal:explanation-reference"
        },
        {
          "name": "control-configuration",
          "value": [],
          "ns": "urn:maposcal:configuration-reference"
        }
      ],
      "annotations": [
        {
          "name": "source-code-reference",
          "value": [
            "middleware_basic_auth.go",
            "router.go",
            "context.go"
          ],
          "ns": "urn:maposcal:source-code-reference"
        }
      ],
      "statements": [
        {
          "statement-id": "ac-3_smt.a",
          "uuid": "de44928c-506d-4bab-a203-15680e0e4d6c",
          "description": "Basic Auth middleware enforces authentication by validating credentials against in-memory maps using constant-time comparison to protect against timing attacks. Middleware can be attached to routes or groups to restrict access. No built-in role or attribute-based authorization is provided; authorization decisions are left to user code."
        }
      ],
      "control_id": "ac-3"
    },
    {
      "uuid": "3197595f-63c6-4051-ac97-c2f025080b81",
      "control-id": "ac-4",
      "props": [
        {
          "name": "control-status",
          "value": "applicable but partially satisfied",
          "ns": "urn:maposcal:control-status-reference"
        },
        {
          "name": "control-name",
          "value": "Information Flow Enforcement",
          "ns": "urn:maposcal:control-name-reference"
        },
        {
          "name": "control-description",
          "value": "Enforce approved authorizations for controlling the flow of information within the system and between connected systems based on information flow control policies within the system and between connected systems are defined;.\n\nAdditional requirements:\n- information flow control policies within the system and between connected systems are defined;",
          "ns": "urn:maposcal:control-description-reference"
        },
        {
          "name": "control-explanation",
          "value": "The service enforces control of information flow primarily through middleware and user-defined handlers that manage authentication and some access control at the HTTP request level. Basic Auth middleware enforces identity verification and restricts access to routes where configured. Trusted proxy configuration enforces client IP validation to mitigate spoofing. However, there are no explicit, granular information flow control policies defined within the system regarding internal data flows or between connected systems. Authorization beyond authentication is left to user-implemented middleware. Therefore, while some enforcement exists via static middleware and network boundary checks, comprehensive information flow policies and enforcement mechanisms are not inherently provided or enforced by the system itself.",
          "ns": "urn:maposcal:explanation-reference"
        },
        {
          "name": "control-configuration",
          "value": [],
          "ns": "urn:maposcal:configuration-reference"
        }
      ],
      "annotations": [
        {
          "name": "source-code-reference",
          "value": [
            "middleware_basic_auth.go",
            "trustedproxy_config.go",
            "router.go",
            "context.go"
          ],
          "ns": "urn:maposcal:source-code-reference"
        }
      ],
      "statements": [
        {
          "statement-id": "ac-4_smt.a",
          "uuid": "bd5d2eaa-db09-458d-8449-5f5be2c4c085",
          "description": "Basic Auth middleware enforces authentication at the HTTP request level, restricting access to routes based on user credentials. Trusted proxy settings validate client IPs to prevent spoofing. However, no fine-grained or dynamic information flow control policies are defined or enforced within the system; authorization must be implemented by users in middleware or handlers."
        }
      ],
      "control_id": "ac-4"
    },
    {
      "uuid": "dfde6fb7-bcbf-4ae3-86a8-b6e5966f2382",
      "control-id": "ac-9",
      "props": [
        {
          "name": "control-status",
          "value": "applicable and not satisfied",
          "ns": "urn:maposcal:control-status-reference"
        },
        {
          "name": "control-name",
          "value": "Previous Logon Notification",
          "ns": "urn:maposcal:control-name-reference"
        },
        {
          "name": "control-description",
          "value": "Notify the user, upon successful logon to the system, of the date and time of the last logon.",
          "ns": "urn:maposcal:control-description-reference"
        },
        {
          "name": "control-explanation",
          "value": "The service uses Basic HTTP Authentication middleware which is stateless and does not maintain session or logon history. There is no mechanism to track, store, or notify users of their previous successful logon date and time. Therefore, the control requirement to notify users upon successful logon of the date and time of the last logon is not implemented or satisfied by the service.",
          "ns": "urn:maposcal:explanation-reference"
        },
        {
          "name": "control-configuration",
          "value": [],
          "ns": "urn:maposcal:configuration-reference"
        }
      ],
      "annotations": [
        {
          "name": "source-code-reference",
          "value": [
            "auth.go"
          ],
          "ns": "urn:maposcal:source-code-reference"
        }
      ],
      "statements": [
        {
          "statement-id": "ac-9_smt.a",
          "uuid": "62c2b151-85b3-4d2a-ac49-2daba62361cd",
          "description": "Basic Auth middleware implements stateless authentication without session or logon tracking; no feature exists to notify users of their previous logon date/time."
        }
      ],
      "control_id": "ac-9"
    },
    {
      "uuid": "2524fc28-b169-46a9-bc53-fd044fdad7b8",
      "control-id": "au-10",
      "props": [
        {
          "name": "control-status",
          "value": "applicable but partially satisfied",
          "ns": "urn:maposcal:control-status-reference"
        },
        {
          "name": "control-name",
          "value": "Non-repudiation",
          "ns": "urn:maposcal:control-name-reference"
        },
        {
          "name": "control-description",
          "value": "Provide irrefutable evidence that an individual (or process acting on behalf of an individual) has performed actions to be covered by non-repudiation are defined;.\n\nAdditional requirements:\n- actions to be covered by non-repudiation are defined;",
          "ns": "urn:maposcal:control-description-reference"
        },
        {
          "name": "control-explanation",
          "value": "The service provides logging middleware that records request paths, methods, statuses, and timestamps, which can support non-repudiation by providing evidence of actions performed. However, the logs do not capture explicit user identity beyond the username set in context after Basic Auth, and there is no built-in tamper-proof or cryptographic assurance of log integrity. Further, the authentication mechanism is Basic Auth, which lacks session tokens or cryptographic signatures, reducing the strength of irrefutable evidence. Actions covered by non-repudiation are not explicitly defined within the framework; the responsibility to define these and implement stronger evidence mechanisms lies with the user or deployment environment. Thus, the control is applicable but only partially satisfied by default.",
          "ns": "urn:maposcal:explanation-reference"
        },
        {
          "name": "control-configuration",
          "value": [],
          "ns": "urn:maposcal:configuration-reference"
        }
      ],
      "annotations": [
        {
          "name": "source-code-reference",
          "value": [
            "middleware/logger.go",
            "middleware/recovery.go",
            "auth/basic_auth.go",
            "context/context.go"
          ],
          "ns": "urn:maposcal:source-code-reference"
        }
      ],
      "statements": [
        {
          "statement-id": "au-10_smt.a",
          "uuid": "04211a76-f1fd-47fb-8f9b-0104767de1ee",
          "description": "The logger middleware captures request data including method, path, status, and timestamps, which can be used to establish a trail of individual actions. Basic Auth middleware establishes identity per request, setting the username in context, but lacks session or token-based proof. The service does not define which actions are covered by non-repudiation explicitly, nor does it add cryptographic assurances to logs or identity evidence, so while some audit data is available, the evidence is not irrefutable. Users must extend or configure additional mechanisms for full non-repudiation."
        }
      ],
      "control_id": "au-10"
    },
    {
      "uuid": "8cb1168e-d2fb-4eb7-ab04-d0cf2abe58b5",
      "control-id": "au-9",
      "props": [
        {
          "name": "control-status",
          "value": "applicable but partially satisfied",
          "ns": "urn:maposcal:control-status-reference"
        },
        {
          "name": "control-name",
          "value": "Protection of Audit Information",
          "ns": "urn:maposcal:control-name-reference"
        },
        {
          "name": "control-description",
          "value": "Protect audit information and audit logging tools from unauthorized access, modification, and deletion; and\n\nAdditional requirements:\n- personnel or roles to be alerted upon detection of unauthorized access, modification, or deletion of audit information is/are defined;",
          "ns": "urn:maposcal:control-description-reference"
        },
        {
          "name": "control-explanation",
          "value": "The service implements audit logging via Logger and Recovery middleware that write logs to configurable writers (default stdout). Logs include request metadata and sanitized headers to protect sensitive data. However, the framework does not provide explicit access controls, integrity protections, or tamper-proof mechanisms for audit logs. There is no built-in alerting or notification system to notify personnel or roles upon unauthorized access, modification, or deletion of audit information. Responsibility for log protection and alerting is deferred to deployment and external infrastructure. This represents a partial satisfaction of the control as basic audit logging exists, but protection and alerting features are not fully implemented within the service.",
          "ns": "urn:maposcal:explanation-reference"
        },
        {
          "name": "control-configuration",
          "value": [],
          "ns": "urn:maposcal:configuration-reference"
        }
      ],
      "annotations": [
        {
          "name": "source-code-reference",
          "value": [
            "middleware/logger.go",
            "middleware/recovery.go",
            "config/config.go"
          ],
          "ns": "urn:maposcal:source-code-reference"
        }
      ],
      "statements": [
        {
          "statement-id": "au-9_smt.a",
          "uuid": "feee01f1-b262-4b4f-8612-c4e18c9727dd",
          "description": "Audit logging is implemented through middleware that logs requests and panics with redacted sensitive data; however, no internal controls enforce protection of log files or alerting on unauthorized access or modification."
        }
      ],
      "control_id": "au-9"
    },
    {
      "uuid": "3b31b04b-0ace-49b2-a6e4-b39d4f83cf84",
      "control-id": "cm-5",
      "props": [
        {
          "name": "control-status",
          "value": "applicable but partially satisfied",
          "ns": "urn:maposcal:control-status-reference"
        },
        {
          "name": "control-name",
          "value": "Access Restrictions for Change",
          "ns": "urn:maposcal:control-name-reference"
        },
        {
          "name": "control-description",
          "value": "Define, document, approve, and enforce physical and logical access restrictions associated with changes to the system.",
          "ns": "urn:maposcal:control-description-reference"
        },
        {
          "name": "control-explanation",
          "value": "The service provides middleware-based Basic Authentication for access control to HTTP endpoints, which can be used to restrict logical access to change operations when implemented by users. However, it lacks built-in, fine-grained authorization or documented approval workflows for changes. Physical access restrictions and formal change approval processes are not implemented within the service itself, placing responsibility on external processes. Therefore, access restrictions for changes are only partially enforced through middleware configuration and user implementation, representing a gap in comprehensive enforcement within the system.",
          "ns": "urn:maposcal:explanation-reference"
        },
        {
          "name": "control-configuration",
          "value": [],
          "ns": "urn:maposcal:configuration-reference"
        }
      ],
      "annotations": [
        {
          "name": "source-code-reference",
          "value": [
            "middleware_basic_auth.go",
            "router.go",
            "context.go"
          ],
          "ns": "urn:maposcal:source-code-reference"
        }
      ],
      "statements": [
        {
          "statement-id": "cm-5_smt.a",
          "uuid": "0e47f1b1-49c3-45f5-908b-c71b0ff27ac0",
          "description": "Basic Auth middleware enables logical access restriction to endpoints, which can be used to protect change operations. However, no built-in mechanisms enforce change approval or physical access restrictions."
        }
      ],
      "control_id": "cm-5"
    },
    {
      "uuid": "2774ba3e-10b5-47c0-97fd-9e537219e64a",
      "control-id": "ia-11",
      "props": [
        {
          "name": "control-status",
          "value": "applicable and not satisfied",
          "ns": "urn:maposcal:control-status-reference"
        },
        {
          "name": "control-name",
          "value": "Re-authentication",
          "ns": "urn:maposcal:control-name-reference"
        },
        {
          "name": "control-description",
          "value": "Require users to re-authenticate when circumstances or situations requiring re-authentication are defined;.\n\nAdditional requirements:\n- circumstances or situations requiring re-authentication are defined;",
          "ns": "urn:maposcal:control-description-reference"
        },
        {
          "name": "control-explanation",
          "value": "The service uses stateless Basic HTTP Authentication middleware where credentials are sent with each request. There is no built-in session or token management, and no mechanism to require users to re-authenticate based on defined circumstances or situations. Consequently, the control requiring re-authentication upon defined events is not satisfied by the service implementation.",
          "ns": "urn:maposcal:explanation-reference"
        },
        {
          "name": "control-configuration",
          "value": [],
          "ns": "urn:maposcal:configuration-reference"
        }
      ],
      "annotations": [
        {
          "name": "source-code-reference",
          "value": [
            "auth.go"
          ],
          "ns": "urn:maposcal:source-code-reference"
        }
      ],
      "statements": [
        {
          "statement-id": "ia-11_smt.a",
          "uuid": "1ee0dce3-d3a6-4901-bc02-e7f75ce22b57",
          "description": "The service implements Basic HTTP Authentication as stateless middleware, requiring credentials on each request but lacking any mechanism for re-authentication triggers or session management. Therefore, situations requiring re-authentication cannot be enforced by the service."
        }
      ],
      "control_id": "ia-11"
    },
    {
      "uuid": "cbbbea9d-9034-4c61-bdd9-c8d3b7636995",
      "control-id": "ia-6",
      "props": [
        {
          "name": "control-status",
          "value": "applicable and inherently satisfied",
          "ns": "urn:maposcal:control-status-reference"
        },
        {
          "name": "control-name",
          "value": "Authentication Feedback",
          "ns": "urn:maposcal:control-name-reference"
        },
        {
          "name": "control-description",
          "value": "Obscure feedback of authentication information during the authentication process to protect the information from possible exploitation and use by unauthorized individuals.",
          "ns": "urn:maposcal:control-description-reference"
        },
        {
          "name": "control-explanation",
          "value": "The service uses Basic Auth middleware with constant-time credential comparison to prevent timing attacks and avoids disclosing specific authentication failure reasons. Additionally, the recovery middleware redacts Authorization headers in logs to prevent leaking credentials. No explicit detailed error messages are returned on authentication failure, thereby obscuring feedback and mitigating information exposure risks.",
          "ns": "urn:maposcal:explanation-reference"
        },
        {
          "name": "control-configuration",
          "value": [],
          "ns": "urn:maposcal:configuration-reference"
        }
      ],
      "annotations": [
        {
          "name": "source-code-reference",
          "value": [
            "auth.go",
            "recovery.go"
          ],
          "ns": "urn:maposcal:source-code-reference"
        }
      ],
      "statements": [
        {
          "statement-id": "ia-6_smt.a",
          "uuid": "53c2ef3f-808b-4a34-9e7d-e76af3efefce",
          "description": "Constant-time comparison is used in Basic Auth middleware to prevent timing attacks, authentication failure feedback does not reveal specific details, and Authorization headers are redacted from logs by the recovery middleware, collectively ensuring that authentication feedback is obscured and protected from exploitation."
        }
      ],
      "control_id": "ia-6"
    },
    {
      "uuid": "744240b1-a707-4983-81f7-5c40ebe302b9",
      "control-id": "ia-7",
      "props": [
        {
          "name": "control-status",
          "value": "applicable and not satisfied",
          "ns": "urn:maposcal:control-status-reference"
        },
        {
          "name": "control-name",
          "value": "Cryptographic Module Authentication",
          "ns": "urn:maposcal:control-name-reference"
        },
        {
          "name": "control-description",
          "value": "Implement mechanisms for authentication to a cryptographic module that meet the requirements of applicable laws, executive orders, directives, policies, regulations, standards, and guidelines for such authentication.",
          "ns": "urn:maposcal:control-description-reference"
        },
        {
          "name": "control-explanation",
          "value": "The service implements Basic Authentication middleware that supports authentication to the cryptographic module (e.g., TLS termination and cryptographic operations) by requiring user credentials. Authentication is achieved via middleware configuration providing user/password maps checked with constant-time comparison to mitigate timing attacks. This satisfies the control through configuration as the authentication mechanism is not inherent but enabled and configured by users in their middleware setup.",
          "ns": "urn:maposcal:explanation-reference"
        },
        {
          "name": "control-configuration",
          "value": [],
          "ns": "urn:maposcal:configuration-reference"
        }
      ],
      "annotations": [
        {
          "name": "source-code-reference",
          "value": [
            "auth.go"
          ],
          "ns": "urn:maposcal:source-code-reference"
        }
      ],
      "statements": [
        {
          "statement-id": "ia-7_smt.a",
          "uuid": "87d7e7dc-ef14-4f68-94c5-ed1af0e65c4f",
          "description": "Basic Auth middleware provides authentication by verifying user credentials against configured in-memory user/password maps using constant-time comparison, ensuring authenticated access to cryptographic operations such as TLS termination."
        }
      ],
      "control_id": "ia-7"
    },
    {
      "uuid": "b12a759b-d206-462f-993b-5f0403bd1eb6",
      "control-id": "sc-10",
      "props": [
        {
          "name": "control-status",
          "value": "applicable and not satisfied",
          "ns": "urn:maposcal:control-status-reference"
        },
        {
          "name": "control-name",
          "value": "Network Disconnect",
          "ns": "urn:maposcal:control-name-reference"
        },
        {
          "name": "control-description",
          "value": "Terminate the network connection associated with a communications session at the end of the session or after a time period of inactivity after which the system terminates a network connection associated with a communication session is defined; of inactivity.\n\nAdditional requirements:\n- a time period of inactivity after which the system terminates a network connection associated with a communication session is defined;",
          "ns": "urn:maposcal:control-description-reference"
        },
        {
          "name": "control-explanation",
          "value": "The service is a stateless HTTP framework that does not implement session management or maintain persistent communication sessions. It relies on Basic Auth for authentication per request and does not implement any network connection termination based on session end or inactivity timeout. The HTTP server\u2019s underlying connection handling and timeouts are not explicitly configured or controlled within the service code or configuration. Therefore, the requirement to terminate network connections at the end of sessions or after a defined period of inactivity is not satisfied and represents a gap in the service's implementation.",
          "ns": "urn:maposcal:explanation-reference"
        },
        {
          "name": "control-configuration",
          "value": [],
          "ns": "urn:maposcal:configuration-reference"
        }
      ],
      "annotations": [
        {
          "name": "source-code-reference",
          "value": [
            "main.go",
            "server.go",
            "middleware.go"
          ],
          "ns": "urn:maposcal:source-code-reference"
        }
      ],
      "statements": [
        {
          "statement-id": "sc-10_smt.a",
          "uuid": "7f74f68c-7f2b-447f-ad73-ec537e0ae433",
          "description": "The service does not maintain sessions or configure network disconnect timeouts; network connections are managed by the underlying HTTP server without explicit inactivity disconnect settings."
        }
      ],
      "control_id": "sc-10"
    },
    {
      "uuid": "ea741905-edf4-4f04-9192-409b2611d92a",
      "control-id": "sc-23",
      "props": [
        {
          "name": "control-status",
          "value": "applicable and not satisfied",
          "ns": "urn:maposcal:control-status-reference"
        },
        {
          "name": "control-name",
          "value": "Session Authenticity",
          "ns": "urn:maposcal:control-name-reference"
        },
        {
          "name": "control-description",
          "value": "Protect the authenticity of communications sessions.",
          "ns": "urn:maposcal:control-description-reference"
        },
        {
          "name": "control-explanation",
          "value": "The service uses Basic HTTP Authentication middleware which provides stateless authentication per request, but does not maintain sessions inherently. Authenticity of communication sessions is protected when the service is configured to run over HTTPS via the RunTLS method, ensuring that credentials and session data are encrypted in transit. Without HTTPS, Basic Auth credentials are transmitted in plaintext, which does not protect session authenticity. Therefore, session authenticity is only satisfied when the service is properly configured to use TLS/HTTPS for transport security.",
          "ns": "urn:maposcal:explanation-reference"
        },
        {
          "name": "control-configuration",
          "value": [],
          "ns": "urn:maposcal:configuration-reference"
        }
      ],
      "annotations": [
        {
          "name": "source-code-reference",
          "value": [
            "middleware_auth_basic.go",
            "server_tls.go",
            "config.go"
          ],
          "ns": "urn:maposcal:source-code-reference"
        }
      ],
      "statements": [
        {
          "statement-id": "sc-23_smt.a",
          "uuid": "4d341b28-12cd-4abd-a9be-0ca976bfdacb",
          "description": "Session authenticity is enforced by requiring Basic Auth credentials on each HTTP request and is protected in transit when the service is configured to use TLS/HTTPS via RunTLS. The service itself does not maintain session state, making session authenticity dependent on secure transport configuration."
        }
      ],
      "control_id": "sc-23"
    },
    {
      "uuid": "3dc87fb1-c5bb-4d56-ad92-73b3993aaaa8",
      "control-id": "sc-24",
      "props": [
        {
          "name": "control-status",
          "value": "applicable but partially satisfied",
          "ns": "urn:maposcal:control-status-reference"
        },
        {
          "name": "control-name",
          "value": "Fail in Known State",
          "ns": "urn:maposcal:control-name-reference"
        },
        {
          "name": "control-description",
          "value": "Fail to a known system state to which system components fail in the event of a system failure is defined; for the following failures on the indicated components while preserving system state information to be preserved in the event of a system failure is defined; in failure: types of system failures for which the system components fail to a known state are defined;.\n\nAdditional requirements:\n- types of system failures for which the system components fail to a known state are defined;\n- known system state to which system components fail in the event of a system failure is defined;\n- system state information to be preserved in the event of a system failure is defined;",
          "ns": "urn:maposcal:control-description-reference"
        },
        {
          "name": "control-explanation",
          "value": "The service includes Recovery middleware that captures panics and errors during runtime, ensuring the system recovers from unexpected failures by returning HTTP 500 responses and logging error details. This middleware serves as a fail-safe mechanism to preserve system availability and logs failure state information. However, the known system state to which components fail (e.g., specific error states or quiescent modes) is not explicitly defined in code or configuration. There is also no explicit preservation or structured persistence of system state information beyond logging. Types of system failures handled are primarily runtime panics; other failure types such as hardware faults, process crashes, or network failures are not explicitly addressed. Thus, the control is partially satisfied through inherent middleware but lacks full definition and configuration of known failure states and state preservation.",
          "ns": "urn:maposcal:explanation-reference"
        },
        {
          "name": "control-configuration",
          "value": [],
          "ns": "urn:maposcal:configuration-reference"
        }
      ],
      "annotations": [
        {
          "name": "source-code-reference",
          "value": [
            "recovery.go"
          ],
          "ns": "urn:maposcal:source-code-reference"
        }
      ],
      "statements": [
        {
          "statement-id": "sc-24_smt.a",
          "uuid": "54570d57-f891-40e3-91ea-6960e88fb374",
          "description": "The Recovery middleware intercepts panics and runtime errors, recovers the HTTP server from failure states, writes HTTP 500 responses, and logs the failure details including stack traces. This mechanism ensures failure handling to a known recovery state (server running and responding with error) for runtime panics."
        }
      ],
      "control_id": "sc-24"
    },
    {
      "uuid": "72270938-13dc-4e56-9eff-8c651e481e18",
      "control-id": "sc-3",
      "props": [
        {
          "name": "control-status",
          "value": "applicable but partially satisfied",
          "ns": "urn:maposcal:control-status-reference"
        },
        {
          "name": "control-name",
          "value": "Security Function Isolation",
          "ns": "urn:maposcal:control-name-reference"
        },
        {
          "name": "control-description",
          "value": "Isolate security functions from nonsecurity functions.",
          "ns": "urn:maposcal:control-description-reference"
        },
        {
          "name": "control-explanation",
          "value": "The service implements Basic Authentication as middleware that isolates authentication logic from other application functions, which provides some separation of security functions. However, the framework does not enforce strict isolation between security and non-security functions beyond middleware boundaries, and authorization is left to user-defined handlers. There is no built-in session management or dedicated security process isolation, thus security functions are only partially isolated from nonsecurity functions.",
          "ns": "urn:maposcal:explanation-reference"
        },
        {
          "name": "control-configuration",
          "value": [],
          "ns": "urn:maposcal:configuration-reference"
        }
      ],
      "annotations": [
        {
          "name": "source-code-reference",
          "value": [
            "middleware/auth.go",
            "middleware/recovery.go",
            "routergroup.go"
          ],
          "ns": "urn:maposcal:source-code-reference"
        }
      ],
      "statements": [
        {
          "statement-id": "sc-3_smt.a",
          "uuid": "a3f9805e-2629-45c1-a595-d68dd77154f0",
          "description": "Authentication is implemented as separate middleware, isolating security function logic for credential verification from core routing and business logic, but no further enforced isolation mechanisms exist within the service."
        }
      ],
      "control_id": "sc-3"
    },
    {
      "uuid": "49e30dea-417a-483a-af07-f784a6ea97ec",
      "control-id": "sc-39",
      "props": [
        {
          "name": "control-status",
          "value": "applicable and inherently satisfied",
          "ns": "urn:maposcal:control-status-reference"
        },
        {
          "name": "control-name",
          "value": "Process Isolation",
          "ns": "urn:maposcal:control-name-reference"
        },
        {
          "name": "control-description",
          "value": "Maintain a separate execution domain for each executing system process.",
          "ns": "urn:maposcal:control-description-reference"
        },
        {
          "name": "control-explanation",
          "value": "The service is implemented in Go, which inherently provides process isolation by running each process in its own execution domain managed by the operating system. The framework does not spawn multiple processes within a single domain; rather, each executing system process (e.g., the web server instance) runs separately. Therefore, process isolation is inherently satisfied by the underlying OS and language runtime without additional configuration or code-level controls in the service.",
          "ns": "urn:maposcal:explanation-reference"
        },
        {
          "name": "control-configuration",
          "value": [],
          "ns": "urn:maposcal:configuration-reference"
        }
      ],
      "annotations": [
        {
          "name": "source-code-reference",
          "value": [
            "main.go",
            "middleware/logger.go",
            "binding/toml.go",
            "render/html.go"
          ],
          "ns": "urn:maposcal:source-code-reference"
        }
      ],
      "statements": [
        {
          "statement-id": "sc-39_smt.a",
          "uuid": "92a3eed0-61ea-4fb0-be89-bdd510914410",
          "description": "The Go runtime and OS ensure that each executing system process runs in a separate execution domain, providing inherent process isolation. The service does not implement or require additional process management or isolation mechanisms."
        }
      ],
      "control_id": "sc-39"
    },
    {
      "uuid": "a95b3089-194a-4c9c-b76a-95846525a18a",
      "control-id": "si-10",
      "props": [
        {
          "name": "control-status",
          "value": "applicable and inherently satisfied",
          "ns": "urn:maposcal:control-status-reference"
        },
        {
          "name": "control-name",
          "value": "Information Input Validation",
          "ns": "urn:maposcal:control-name-reference"
        },
        {
          "name": "control-description",
          "value": "Check the validity of the following information inputs: information inputs to the system requiring validity checks are defined;.\n\nAdditional requirements:\n- information inputs to the system requiring validity checks are defined;",
          "ns": "urn:maposcal:control-description-reference"
        },
        {
          "name": "control-explanation",
          "value": "The service implements input validation inherently through its binding and validation mechanism. It supports binding incoming data from various formats (JSON, XML, YAML, form, protobuf, msgpack, TOML, plain text) into typed structures. Post-binding, the data is validated using the integrated github.com/go-playground/validator/v10 library. Validation occurs automatically within the Bind methods (e.g., formBinding.Bind) which invoke the validate function. This ensures that all information inputs requiring validity checks are defined and enforced as part of input binding, satisfying the control inherently without additional configuration.",
          "ns": "urn:maposcal:explanation-reference"
        },
        {
          "name": "control-configuration",
          "value": [],
          "ns": "urn:maposcal:configuration-reference"
        }
      ],
      "annotations": [
        {
          "name": "source-code-reference",
          "value": [
            "binding/form.go",
            "binding/default_validator.go"
          ],
          "ns": "urn:maposcal:source-code-reference"
        }
      ],
      "statements": [
        {
          "statement-id": "si-10_smt.a",
          "uuid": "b7a44fff-34b5-40a6-a57f-f80f7b46e9d3",
          "description": "Input validation is implemented inherently by the service via the input binding process that integrates github.com/go-playground/validator/v10. Validation occurs after binding input data from multiple formats to Go structs, ensuring all required validity checks are performed on information inputs."
        }
      ],
      "control_id": "si-10"
    },
    {
      "uuid": "d62994f9-9810-4ab9-a929-98c614d6163c",
      "control-id": "si-16",
      "props": [
        {
          "name": "control-status",
          "value": "applicable and not satisfied",
          "ns": "urn:maposcal:control-status-reference"
        },
        {
          "name": "control-name",
          "value": "Memory Protection",
          "ns": "urn:maposcal:control-name-reference"
        },
        {
          "name": "control-description",
          "value": "Implement the following controls to protect the system memory from unauthorized code execution: controls to be implemented to protect the system memory from unauthorized code execution are defined;.\n\nAdditional requirements:\n- controls to be implemented to protect the system memory from unauthorized code execution are defined;",
          "ns": "urn:maposcal:control-description-reference"
        },
        {
          "name": "control-explanation",
          "value": "The service is a Go-based HTTP framework that does not explicitly implement or enforce any memory protection controls such as executable space protection, address space layout randomization (ASLR), or similar runtime safeguards to prevent unauthorized code execution in system memory. There is no indication of inherent memory protection mechanisms enabled within the framework or through its configuration. Additionally, no configuration options or code references were found that enable or enforce memory protection features. Therefore, the control is applicable but not satisfied, representing a gap in protecting system memory from unauthorized code execution.",
          "ns": "urn:maposcal:explanation-reference"
        },
        {
          "name": "control-configuration",
          "value": [],
          "ns": "urn:maposcal:configuration-reference"
        }
      ],
      "annotations": [
        {
          "name": "source-code-reference",
          "value": [
            "mode.go",
            "debug.go",
            "recovery.go"
          ],
          "ns": "urn:maposcal:source-code-reference"
        }
      ],
      "statements": [
        {
          "statement-id": "si-16_smt.a",
          "uuid": "98b60a65-04cd-4583-84f4-bb890442dc62",
          "description": "The framework does not include or configure memory protection mechanisms such as executable space protection or ASLR. No inherent or configurable controls are present to prevent unauthorized code execution in system memory."
        }
      ],
      "control_id": "si-16"
    }
  ]
}