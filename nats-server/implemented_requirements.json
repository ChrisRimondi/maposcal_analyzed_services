{
  "implemented_requirements": [
    {
      "uuid": "33d1e302-d015-4265-87c2-eea4cf5f9313",
      "control-id": "ac-10",
      "props": [
        {
          "name": "control-status",
          "value": "applicable but partially satisfied",
          "ns": "urn:maposcal:control-status-reference"
        },
        {
          "name": "control-name",
          "value": "Concurrent Session Control",
          "ns": "urn:maposcal:control-name-reference"
        },
        {
          "name": "control-description",
          "value": "Limit the number of concurrent sessions for each accounts and/or account types for which to limit the number of concurrent sessions is defined; to the number of concurrent sessions to be allowed for each account and/or account type is defined;.\n\nAdditional requirements:\n- accounts and/or account types for which to limit the number of concurrent sessions is defined;\n- the number of concurrent sessions to be allowed for each account and/or account type is defined;",
          "ns": "urn:maposcal:control-description-reference"
        },
        {
          "name": "control-explanation",
          "value": "The service supports multi-tenant accounts and tracks connections and sessions per account. Session persistence and limits (e.g., MaxMsgsPer) are defined for MQTT streams, indicating some control over session state. However, there is no explicit evidence in the provided context or configuration that the system enforces a limit on the number of concurrent sessions per account or account type. While connection tracking and resource limits exist, the specific enforcement of maximum concurrent sessions per account or account type is not documented or configured. Therefore, the control is only partially satisfied as the service provides partial mechanisms related to session management but lacks explicit concurrent session limit enforcement per account or account type.",
          "ns": "urn:maposcal:explanation-reference"
        },
        {
          "name": "control-configuration",
          "value": [],
          "ns": "urn:maposcal:configuration-reference"
        }
      ],
      "annotations": [
        {
          "name": "source-code-reference",
          "value": [
            "server/README-MQTT.md",
            "doc/TODO.md"
          ],
          "ns": "urn:maposcal:source-code-reference"
        }
      ],
      "statements": [
        {
          "statement-id": "ac-10_smt.a",
          "uuid": "8855dc98-b25d-4b76-8804-a6559a6e3ce7",
          "description": "The service tracks sessions and connections per account and supports session persistence with limits on message counts for MQTT sessions, but does not explicitly impose or configure limits on the number of concurrent sessions per account or account type."
        }
      ],
      "control_id": "ac-10"
    },
    {
      "uuid": "26efc572-cc22-41c4-b696-99493601f075",
      "control-id": "ac-3",
      "props": [
        {
          "name": "control-status",
          "value": "applicable and not satisfied",
          "ns": "urn:maposcal:control-status-reference"
        },
        {
          "name": "control-name",
          "value": "Access Enforcement",
          "ns": "urn:maposcal:control-name-reference"
        },
        {
          "name": "control-description",
          "value": "Enforce approved authorizations for logical access to information and system resources in accordance with applicable access control policies.",
          "ns": "urn:maposcal:control-description-reference"
        },
        {
          "name": "control-explanation",
          "value": "The service enforces access control authorizations dynamically through validated JWTs, NKEYs, TLS client certificates, and per-account/user permissions for publish/subscribe messaging and other system resources. Access enforcement is implemented in code at connection and operation levels, ensuring requests are checked against configured access policies. However, the enforcement depends on proper configuration of authentication and authorization parameters, such as JWT claims, account permissions, and TLS options, which must be correctly set to satisfy the control.",
          "ns": "urn:maposcal:explanation-reference"
        },
        {
          "name": "control-configuration",
          "value": [],
          "ns": "urn:maposcal:configuration-reference"
        }
      ],
      "annotations": [
        {
          "name": "source-code-reference",
          "value": [
            "server/jetstream_events.go",
            "server/auth.go",
            "server/server.go",
            "config/config.go"
          ],
          "ns": "urn:maposcal:source-code-reference"
        }
      ],
      "statements": [
        {
          "statement-id": "ac-3_smt.a",
          "uuid": "da75531a-471a-4097-b000-80a25cf6e2d7",
          "description": "Access enforcement is implemented through validation of JWT tokens, NKEY signatures, and TLS client certificates, combined with per-account and per-user permissions that govern publish and subscribe actions. The system checks access rights dynamically on each client operation and enforces connection closure upon violations. These mechanisms are configurable via authentication and authorization parameters, making the control applicable and enforceable through proper system configuration."
        }
      ],
      "control_id": "ac-3"
    },
    {
      "uuid": "81928075-0c8c-4186-a493-204abe638944",
      "control-id": "ac-9",
      "props": [
        {
          "name": "control-status",
          "value": "applicable and not satisfied",
          "ns": "urn:maposcal:control-status-reference"
        },
        {
          "name": "control-name",
          "value": "Previous Logon Notification",
          "ns": "urn:maposcal:control-name-reference"
        },
        {
          "name": "control-description",
          "value": "Notify the user, upon successful logon to the system, of the date and time of the last logon.",
          "ns": "urn:maposcal:control-description-reference"
        },
        {
          "name": "control-explanation",
          "value": "The service is a high-performance messaging system with comprehensive authentication and authorization mechanisms but does not implement user-facing previous logon notifications. There is no evidence in the provided context of functionality that notifies users upon successful logon of the date and time of their last logon. This represents a gap in satisfying the control AC-9.",
          "ns": "urn:maposcal:explanation-reference"
        },
        {
          "name": "control-configuration",
          "value": [],
          "ns": "urn:maposcal:configuration-reference"
        }
      ],
      "annotations": [
        {
          "name": "source-code-reference",
          "value": [
            "server/configs/one.creds",
            "server/ats/ats.go",
            "util/nats-server.service",
            "util/nats-server-hardened.service"
          ],
          "ns": "urn:maposcal:source-code-reference"
        }
      ],
      "statements": [
        {
          "statement-id": "ac-9_smt.a",
          "uuid": "64d7e373-bd05-4881-b18e-15078effb575",
          "description": "The service does not include functionality to notify users of their previous logon time upon successful authentication. Authentication is robust with JWT, NKEY, and TLS certificate mechanisms, but no mechanism exists to convey last logon information to users."
        }
      ],
      "control_id": "ac-9"
    },
    {
      "uuid": "2cdba226-6f92-48a1-b14e-b10ba40164bb",
      "control-id": "au-10",
      "props": [
        {
          "name": "control-status",
          "value": "applicable but partially satisfied",
          "ns": "urn:maposcal:control-status-reference"
        },
        {
          "name": "control-name",
          "value": "Non-repudiation",
          "ns": "urn:maposcal:control-name-reference"
        },
        {
          "name": "control-description",
          "value": "Provide irrefutable evidence that an individual (or process acting on behalf of an individual) has performed actions to be covered by non-repudiation are defined;.\n\nAdditional requirements:\n- actions to be covered by non-repudiation are defined;",
          "ns": "urn:maposcal:control-description-reference"
        },
        {
          "name": "control-explanation",
          "value": "The service employs robust authentication mechanisms (JWT, NKEY, TLS client certificates) which provide strong identity assurance for users and processes performing actions. Additionally, the system publishes structured advisory events and metrics via JetStream streams that include connection activity and message acknowledgments, offering a record of actions taken. However, the documentation and configuration do not explicitly define a comprehensive non-repudiation policy, nor do they demonstrate cryptographic binding of actions to identities sufficient to provide irrefutable proof preventing repudiation. While detailed audit event streams exist, it is unclear if these are tamper-proof or cryptographically signed to fully satisfy non-repudiation requirements. Therefore, the control is applicable but only partially satisfied, as the service provides foundational elements but lacks explicit non-repudiation action definitions and cryptographic guarantees.",
          "ns": "urn:maposcal:explanation-reference"
        },
        {
          "name": "control-configuration",
          "value": [],
          "ns": "urn:maposcal:configuration-reference"
        }
      ],
      "annotations": [
        {
          "name": "source-code-reference",
          "value": [
            "server/main.go",
            "server/audit.go",
            "server/auth.go",
            "server/jetstream.go",
            "config/config.go"
          ],
          "ns": "urn:maposcal:source-code-reference"
        }
      ],
      "statements": [
        {
          "statement-id": "au-10_smt.a",
          "uuid": "64dc2c7d-453d-4a43-9ca4-72c6891ab715",
          "description": "The service tracks user and process identities through strong authentication methods and publishes detailed advisory events capturing user actions and system events. These advisory streams provide a foundation for audit trails related to performed actions. However, the control lacks explicit configuration or implementation of cryptographic non-repudiation features such as digital signatures on actions or tamper-proof logs specifically designed to provide irrefutable evidence of individual actions, resulting in partial satisfaction."
        }
      ],
      "control_id": "au-10"
    },
    {
      "uuid": "7df2495a-0d4d-43d8-a937-910a61836f66",
      "control-id": "au-3",
      "props": [
        {
          "name": "control-status",
          "value": "applicable and inherently satisfied",
          "ns": "urn:maposcal:control-status-reference"
        },
        {
          "name": "control-name",
          "value": "Content of Audit Records",
          "ns": "urn:maposcal:control-name-reference"
        },
        {
          "name": "control-description",
          "value": "Ensure that audit records contain information that establishes the following:",
          "ns": "urn:maposcal:control-description-reference"
        },
        {
          "name": "control-explanation",
          "value": "The service implements comprehensive audit logging through its advisory and internal event system, which records structured JSON audit records containing detailed information such as user identities, connection metadata, event timestamps, and resource usage. JetStream advisories capture stream and consumer actions, message acknowledgments, and cluster events, ensuring audit records establish who, what, when, and where for security-relevant activities. Connection tracking includes start time, uptime, and total connections, satisfying the control's content requirements inherently without requiring additional configuration.",
          "ns": "urn:maposcal:explanation-reference"
        },
        {
          "name": "control-configuration",
          "value": [],
          "ns": "urn:maposcal:configuration-reference"
        }
      ],
      "annotations": [
        {
          "name": "source-code-reference",
          "value": [
            "server/core.go",
            "server/advisory.go",
            "server/jetstream.go",
            "server/monitor.go"
          ],
          "ns": "urn:maposcal:source-code-reference"
        }
      ],
      "statements": [
        {
          "statement-id": "au-3_smt.a",
          "uuid": "c38318a8-d22f-4861-87fa-3b5cd441b1a7",
          "description": "Audit records include structured JSON advisories and metrics that contain comprehensive information about user identities, connection metadata (start time, uptime, total connections), stream and consumer actions, message acknowledgments, and cluster events, inherently satisfying the control\u2019s requirement for content in audit records."
        }
      ],
      "control_id": "au-3"
    },
    {
      "uuid": "58dcb43a-447d-4b11-a603-d86e2d62d1f3",
      "control-id": "cm-5",
      "props": [
        {
          "name": "control-status",
          "value": "applicable and not satisfied",
          "ns": "urn:maposcal:control-status-reference"
        },
        {
          "name": "control-name",
          "value": "Access Restrictions for Change",
          "ns": "urn:maposcal:control-name-reference"
        },
        {
          "name": "control-description",
          "value": "Define, document, approve, and enforce physical and logical access restrictions associated with changes to the system.",
          "ns": "urn:maposcal:control-description-reference"
        },
        {
          "name": "control-explanation",
          "value": "The service enforces logical access restrictions for system changes primarily through configuration of authentication and authorization mechanisms, including JWT-based authentication, NKEYs, TLS client certificates, and scoped account and user permissions. These configurations control who can perform changes and how. However, physical access controls are outside the scope of the service code and must be managed externally. The service relies on configuration files and runtime parameters to enforce logical access restrictions, making the control applicable but satisfied only through configuration.",
          "ns": "urn:maposcal:explanation-reference"
        },
        {
          "name": "control-configuration",
          "value": [],
          "ns": "urn:maposcal:configuration-reference"
        }
      ],
      "annotations": [
        {
          "name": "source-code-reference",
          "value": [
            "internal/auth.go",
            "server/config.go",
            "server/server.go",
            "internal/jwt/jwt.go",
            "internal/nkeys/nkeys.go",
            "server/tls.go"
          ],
          "ns": "urn:maposcal:source-code-reference"
        }
      ],
      "statements": [
        {
          "statement-id": "cm-5_smt.a",
          "uuid": "bfe33335-488b-4880-8366-3a7a78ced4bf",
          "description": "Logical access restrictions for changes are enforced through the service's configuration of authentication (JWT, NKEY, TLS client certs) and authorization (account and user permissions). Physical access restrictions are not managed by the service software and must be handled via external administrative controls."
        }
      ],
      "control_id": "cm-5"
    },
    {
      "uuid": "eb44460d-b5b8-43df-a3c2-8c86d183995c",
      "control-id": "ia-11",
      "props": [
        {
          "name": "control-status",
          "value": "applicable but partially satisfied",
          "ns": "urn:maposcal:control-status-reference"
        },
        {
          "name": "control-name",
          "value": "Re-authentication",
          "ns": "urn:maposcal:control-name-reference"
        },
        {
          "name": "control-description",
          "value": "Require users to re-authenticate when circumstances or situations requiring re-authentication are defined;.\n\nAdditional requirements:\n- circumstances or situations requiring re-authentication are defined;",
          "ns": "urn:maposcal:control-description-reference"
        },
        {
          "name": "control-explanation",
          "value": "The service implements multiple authentication mechanisms and tracks session activity and connection metadata, but there is no explicit indication that it enforces re-authentication based on defined circumstances or situations such as session timeout, privilege escalation, or inactivity. While sessions are persisted and connection activity tracked, the control requirement to require re-authentication under defined conditions is only partially addressed. There is mention of TODOs regarding connection closure on permission violations, but no explicit re-authentication triggers are implemented or configured per the provided context.",
          "ns": "urn:maposcal:explanation-reference"
        },
        {
          "name": "control-configuration",
          "value": [],
          "ns": "urn:maposcal:configuration-reference"
        }
      ],
      "annotations": [
        {
          "name": "source-code-reference",
          "value": [
            "server/errors.go",
            "doc/README-MQTT.md",
            "doc/TODO.md",
            "doc/locksordering.txt"
          ],
          "ns": "urn:maposcal:source-code-reference"
        }
      ],
      "statements": [
        {
          "statement-id": "ia-11_smt.a",
          "uuid": "3c197353-2b58-4e00-a5a2-b58eda7c3709",
          "description": "Re-authentication is not explicitly enforced on defined circumstances such as session expiration or privilege changes. Session persistence and connection tracking exist, but no automated re-authentication triggers have been implemented or configured."
        }
      ],
      "control_id": "ia-11"
    },
    {
      "uuid": "12cf55a5-f5af-4237-a6c7-c0911c5afe0f",
      "control-id": "ia-7",
      "props": [
        {
          "name": "control-status",
          "value": "applicable and inherently satisfied",
          "ns": "urn:maposcal:control-status-reference"
        },
        {
          "name": "control-name",
          "value": "Cryptographic Module Authentication",
          "ns": "urn:maposcal:control-name-reference"
        },
        {
          "name": "control-description",
          "value": "Implement mechanisms for authentication to a cryptographic module that meet the requirements of applicable laws, executive orders, directives, policies, regulations, standards, and guidelines for such authentication.",
          "ns": "urn:maposcal:control-description-reference"
        },
        {
          "name": "control-explanation",
          "value": "The service implements robust cryptographic module authentication inherently through the use of cryptographically strong identity mechanisms including ed25519-signed JWTs, NKEY authentication with ed25519 key pairs, and TLS client certificates integrated with OS certificate stores (notably Windows). These mechanisms ensure authentication to cryptographic modules meets applicable laws and standards without additional configuration. The cryptographic keys and modules are managed securely within the system and rely on established libraries and OS integrations, inherently satisfying the control requirements.",
          "ns": "urn:maposcal:explanation-reference"
        },
        {
          "name": "control-configuration",
          "value": [],
          "ns": "urn:maposcal:configuration-reference"
        }
      ],
      "annotations": [
        {
          "name": "source-code-reference",
          "value": [
            "server/certstore/certstore_windows.go",
            "server/certstore/certstore_other.go",
            "server/ciphersuites.go"
          ],
          "ns": "urn:maposcal:source-code-reference"
        }
      ],
      "statements": [
        {
          "statement-id": "ia-7_smt.a",
          "uuid": "a3fa9473-ceac-44bb-929a-5554acbb1697",
          "description": "The system uses cryptographically strong authentication methods such as JWTs signed with ed25519, NKEYs for identity proofing, and TLS client certificates integrated with OS certificate stores. These mechanisms authenticate users and processes to cryptographic modules as required by applicable standards, inherently satisfying the control."
        }
      ],
      "control_id": "ia-7"
    },
    {
      "uuid": "27c6d142-6784-455f-9f98-16b82084d348",
      "control-id": "sc-24",
      "props": [
        {
          "name": "control-status",
          "value": "applicable but partially satisfied",
          "ns": "urn:maposcal:control-status-reference"
        },
        {
          "name": "control-name",
          "value": "Fail in Known State",
          "ns": "urn:maposcal:control-name-reference"
        },
        {
          "name": "control-description",
          "value": "Fail to a known system state to which system components fail in the event of a system failure is defined; for the following failures on the indicated components while preserving system state information to be preserved in the event of a system failure is defined; in failure: types of system failures for which the system components fail to a known state are defined;.\n\nAdditional requirements:\n- types of system failures for which the system components fail to a known state are defined;\n- known system state to which system components fail in the event of a system failure is defined;\n- system state information to be preserved in the event of a system failure is defined;",
          "ns": "urn:maposcal:control-description-reference"
        },
        {
          "name": "control-explanation",
          "value": "The service implements persistence of session state, message data, and retained messages via the JetStream component, which provides durable storage and recovery of system state across failures. This supports failing to a known system state for messaging and streaming components in the event of system failures. Types of system failures such as client disconnects (including implicit disconnects via MQTT Will messages) are handled with appropriate state preservation mechanisms. However, the exact known system states to which components fail, and the comprehensive types of system failures covered, are not explicitly defined in configuration or code comments. Additionally, preservation of some system state information, such as transient connection metadata or in-memory authorization caches, is not clearly documented, representing a partial satisfaction of the control. There is no explicit configuration or code evidence describing failure modes and fallback states for core server components outside of JetStream persistence. Therefore, while the system provides strong mechanisms for known state failure in streaming and session persistence, a gap remains in defining and documenting fail states and state preservation for all system components and failure types.",
          "ns": "urn:maposcal:explanation-reference"
        },
        {
          "name": "control-configuration",
          "value": [],
          "ns": "urn:maposcal:configuration-reference"
        }
      ],
      "annotations": [
        {
          "name": "source-code-reference",
          "value": [
            "server/jetstream_errors.go",
            "server/README-MQTT.md",
            "server/certstore/errors.go"
          ],
          "ns": "urn:maposcal:source-code-reference"
        }
      ],
      "statements": [
        {
          "statement-id": "sc-24_smt.a",
          "uuid": "1b96f486-4f84-4b24-bb80-af82b43c539e",
          "description": "JetStream implements durable message and session state persistence, enabling failover to a known system state on message streaming failures. MQTT Will messages support client implicit disconnect scenarios with state preservation. However, failure handling and state preservation for core server components and other failure types are not explicitly documented or configured, leading to partial control satisfaction."
        }
      ],
      "control_id": "sc-24"
    },
    {
      "uuid": "7c327294-d957-48ca-a64e-6d996ad5ee94",
      "control-id": "sc-3",
      "props": [
        {
          "name": "control-status",
          "value": "applicable and inherently satisfied",
          "ns": "urn:maposcal:control-status-reference"
        },
        {
          "name": "control-name",
          "value": "Security Function Isolation",
          "ns": "urn:maposcal:control-name-reference"
        },
        {
          "name": "control-description",
          "value": "Isolate security functions from nonsecurity functions.",
          "ns": "urn:maposcal:control-description-reference"
        },
        {
          "name": "control-explanation",
          "value": "The service architecture inherently isolates security functions such as authentication, authorization, encryption, and auditing from nonsecurity functions. Authentication and authorization are handled distinctly through JWTs, NKEYs, TLS client certificates, and multi-tenant account isolation, which separates subject spaces and permissions per account. The TLS and certificate store integration components operate separately from core messaging and streaming functionality. Additionally, audit and advisory systems publish security-relevant events independently. This architectural separation ensures that security functions are isolated by design without requiring additional configuration.",
          "ns": "urn:maposcal:explanation-reference"
        },
        {
          "name": "control-configuration",
          "value": [],
          "ns": "urn:maposcal:configuration-reference"
        }
      ],
      "annotations": [
        {
          "name": "source-code-reference",
          "value": [
            "server/nkey.go",
            "server/jetstream_errors.go"
          ],
          "ns": "urn:maposcal:source-code-reference"
        }
      ],
      "statements": [
        {
          "statement-id": "sc-3_smt.a",
          "uuid": "11a004a3-3394-42c2-b425-974eb1ca9553",
          "description": "Security functions including authentication, authorization, encryption, and auditing are implemented in separate modules and subsystems, maintaining clear isolation from core message routing and streaming components."
        }
      ],
      "control_id": "sc-3"
    },
    {
      "uuid": "07b3863b-a89b-4b7a-84cc-e2a1e8aa159e",
      "control-id": "sc-39",
      "props": [
        {
          "name": "control-status",
          "value": "applicable and inherently satisfied",
          "ns": "urn:maposcal:control-status-reference"
        },
        {
          "name": "control-name",
          "value": "Process Isolation",
          "ns": "urn:maposcal:control-name-reference"
        },
        {
          "name": "control-description",
          "value": "Maintain a separate execution domain for each executing system process.",
          "ns": "urn:maposcal:control-description-reference"
        },
        {
          "name": "control-explanation",
          "value": "The service is implemented as a standalone Go server process running on standard operating systems which inherently enforce process isolation at the OS level. Each instance of the server runs in its own execution domain, isolated by the operating system's process management and memory protection mechanisms without requiring additional configuration or custom isolation features within the service itself.",
          "ns": "urn:maposcal:explanation-reference"
        },
        {
          "name": "control-configuration",
          "value": [],
          "ns": "urn:maposcal:configuration-reference"
        }
      ],
      "annotations": [
        {
          "name": "source-code-reference",
          "value": [
            "server/signal.go",
            "server/pse/pse_netbsd.go",
            "server/pse/pse_dragonfly.go",
            "server/pse/pse_openbsd.go"
          ],
          "ns": "urn:maposcal:source-code-reference"
        }
      ],
      "statements": [
        {
          "statement-id": "sc-39_smt.a",
          "uuid": "3a0abddd-bcbd-46a4-8ae7-1842de316095",
          "description": "The service runs as a single OS-level process per instance, leveraging the operating system's native process isolation features to maintain separate execution domains. No multi-threaded or shared process domains are used to violate isolation, thus inherently satisfying the control."
        }
      ],
      "control_id": "sc-39"
    },
    {
      "uuid": "31ef6140-b786-47f4-b174-469b8c1cff6c",
      "control-id": "sc-4",
      "props": [
        {
          "name": "control-status",
          "value": "applicable and not satisfied",
          "ns": "urn:maposcal:control-status-reference"
        },
        {
          "name": "control-name",
          "value": "Information in Shared System Resources",
          "ns": "urn:maposcal:control-name-reference"
        },
        {
          "name": "control-description",
          "value": "Prevent unauthorized and unintended information transfer via shared system resources.",
          "ns": "urn:maposcal:control-description-reference"
        },
        {
          "name": "control-explanation",
          "value": "The service supports multi-tenant accounts with strict subject space isolation, ensuring that account-level permissions and scoped subjects prevent unauthorized access to shared resources. Access control enforcement is dynamic and configuration-driven, relying on JWT-based authentication, scoped permissions, and account isolation to prevent unintended information transfer. However, these protections require proper configuration of account permissions and limits. Without correct configuration, unauthorized information transfer via shared resources could occur.",
          "ns": "urn:maposcal:explanation-reference"
        },
        {
          "name": "control-configuration",
          "value": [],
          "ns": "urn:maposcal:configuration-reference"
        }
      ],
      "annotations": [
        {
          "name": "source-code-reference",
          "value": [
            "server/auth.go",
            "server/accounts.go",
            "server/jetstream.go",
            "server/config.go"
          ],
          "ns": "urn:maposcal:source-code-reference"
        }
      ],
      "statements": [
        {
          "statement-id": "sc-4_smt.a",
          "uuid": "b89088e6-503d-456d-a59a-aecde8998bbc",
          "description": "Multi-tenant account isolation and scoped permissions enforce separation of subjects and resource boundaries. Access controls are applied dynamically per connection using JWT claims and authentication mechanisms. Resource limits and permission enforcement prevent unauthorized access and unintended data transfer across shared system resources."
        }
      ],
      "control_id": "sc-4"
    },
    {
      "uuid": "4381bb70-6d58-4610-9f33-3657f13d2c08",
      "control-id": "si-10",
      "props": [
        {
          "name": "control-status",
          "value": "applicable and inherently satisfied",
          "ns": "urn:maposcal:control-status-reference"
        },
        {
          "name": "control-name",
          "value": "Information Input Validation",
          "ns": "urn:maposcal:control-name-reference"
        },
        {
          "name": "control-description",
          "value": "Check the validity of the following information inputs: information inputs to the system requiring validity checks are defined;.\n\nAdditional requirements:\n- information inputs to the system requiring validity checks are defined;",
          "ns": "urn:maposcal:control-description-reference"
        },
        {
          "name": "control-explanation",
          "value": "The service implements input validation inherently within its core server and protocol handling logic. Subject names, payloads, and protocol frames are validated at multiple layers during client interactions. Access control enforcement includes validity checks on subjects and permissions. Authentication inputs such as JWTs, NKEYs, and TLS client certificates undergo cryptographic validation and claims verification. The system enforces size limits and protocol constraints to prevent malformed or invalid inputs. These validations are integral and embedded directly within the processing code, making the control inherently satisfied without relying solely on configuration.",
          "ns": "urn:maposcal:explanation-reference"
        },
        {
          "name": "control-configuration",
          "value": [],
          "ns": "urn:maposcal:configuration-reference"
        }
      ],
      "annotations": [
        {
          "name": "source-code-reference",
          "value": [
            "server/proto.go",
            "server/jetstream_errors.go",
            "server/certidp/messages.go",
            "server/certstore/errors.go"
          ],
          "ns": "urn:maposcal:source-code-reference"
        }
      ],
      "statements": [
        {
          "statement-id": "si-10_smt.a",
          "uuid": "0d3a916b-f675-448f-a3a8-fcd8bd95a87a",
          "description": "Input validation is implemented through protocol parsing and verification in server/proto.go, including checks for sufficient data, valid message framing, and protocol compliance. Authentication inputs such as JWT and NKEY are cryptographically validated during connection setup. Subject and payload validations occur during publish/subscribe operations enforcing permission and format correctness. These validations are embedded in source code and do not depend solely on external configuration."
        }
      ],
      "control_id": "si-10"
    },
    {
      "uuid": "5384c579-bf93-4007-a5de-1c7ef664d7f5",
      "control-id": "si-16",
      "props": [
        {
          "name": "control-status",
          "value": "applicable and not satisfied",
          "ns": "urn:maposcal:control-status-reference"
        },
        {
          "name": "control-name",
          "value": "Memory Protection",
          "ns": "urn:maposcal:control-name-reference"
        },
        {
          "name": "control-description",
          "value": "Implement the following controls to protect the system memory from unauthorized code execution: controls to be implemented to protect the system memory from unauthorized code execution are defined;.\n\nAdditional requirements:\n- controls to be implemented to protect the system memory from unauthorized code execution are defined;",
          "ns": "urn:maposcal:control-description-reference"
        },
        {
          "name": "control-explanation",
          "value": "The service relies on underlying operating system and runtime environment memory protection mechanisms to prevent unauthorized code execution in system memory. The Go runtime and OS memory management enforce memory safety features such as memory isolation and execution prevention (e.g., NX bit) inherently. However, explicit memory protection controls such as Address Space Layout Randomization (ASLR) and Data Execution Prevention (DEP) are not implemented by the service code itself but depend on the host OS configuration. Therefore, the control is applicable and satisfied through configuration of the host environment and OS.",
          "ns": "urn:maposcal:explanation-reference"
        },
        {
          "name": "control-configuration",
          "value": [],
          "ns": "urn:maposcal:configuration-reference"
        }
      ],
      "annotations": [
        {
          "name": "source-code-reference",
          "value": [
            "server/sysmem/mem_wasm.go",
            "server/sysmem/mem_zos.go",
            "server/sysmem/mem_linux.go"
          ],
          "ns": "urn:maposcal:source-code-reference"
        }
      ],
      "statements": [
        {
          "statement-id": "si-16_smt.a",
          "uuid": "e8ddc5f5-8a59-4f90-bd09-5b3aa64b358f",
          "description": "The control is implemented by relying on the operating system and Go runtime's inherent memory protection features. The service does not directly implement memory protection controls in code but expects the OS configuration to provide protections against unauthorized code execution."
        }
      ],
      "control_id": "si-16"
    }
  ]
}